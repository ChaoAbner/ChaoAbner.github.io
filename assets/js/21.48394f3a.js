(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{382:function(_,v,t){"use strict";t.r(v);var a=t(43),s=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"mysql总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql总结"}},[_._v("#")]),_._v(" MySQL总结")]),_._v(" "),t("ol",[t("li",[t("h4",{attrs:{id:"范式-最好记住几个例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#范式-最好记住几个例子"}},[_._v("#")]),_._v(" 范式(最好记住几个例子)")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("第一范式(确保每列保持原子性)")]),_._v(" "),t("p",[_._v("表：字段1、 字段2(字段2.1、字段2.2)、字段3 ......")]),_._v(" "),t("p",[_._v("学生（学号，姓名，性别，出生年月日），如果认为最后一列还可以再分成（出生年，出生月，出生日），它就不是一范式了，否则就是。"),t("strong",[_._v("如果有一列可以拆分，就应该再拆分")])])]),_._v(" "),t("li",[t("p",[_._v("第二范式(确保表中的每列都和主键相关) 对记录的"),t("strong",[_._v("惟一性")])]),_._v(" "),t("p",[_._v("错误表：学号、课程号、姓名、学分;")]),_._v(" "),t("p",[_._v("正确表：学生："),t("code",[_._v("Student")]),_._v("(学号, 姓名)；课程："),t("code",[_._v("Course")]),_._v("(课程号, 学分)；选课关系："),t("code",[_._v("StudentCourse")]),_._v("(学号, 课程号, 成绩)。")])]),_._v(" "),t("li",[t("p",[_._v("第三范式(确保每列都和主键列直接相关,而不是间接相关) 对字段的"),t("strong",[_._v("冗余性")])]),_._v(" "),t("p",[_._v("表: 学号, 姓名, 年龄, 学院名称, 学院电话")]),_._v(" "),t("p",[_._v("因为存在"),t("strong",[_._v("依赖传递")]),_._v(": (学号) → (学生)→(所在学院) → (学院电话) 。")]),_._v(" "),t("p",[_._v("正确表：学生：(学号, 姓名, 年龄, 所在学院)；学院：(学院, 电话)。")])])])]),_._v(" "),t("li",[t("h4",{attrs:{id:"索引（索引的含义、优缺点）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引（索引的含义、优缺点）"}},[_._v("#")]),_._v(" 索引（索引的含义、优缺点）")]),_._v(" "),t("p",[_._v("提高查询效率的排好序的数据结构")]),_._v(" "),t("p",[_._v("优点是可以提高"),t("strong",[_._v("查询")]),_._v("的速度效率。")]),_._v(" "),t("p",[_._v("缺点是1、降低了插入，更新，删除的效率。2、创建维护索引要消耗时间。3、占用了一部分物理内存。")])]),_._v(" "),t("li",[t("h4",{attrs:{id:"b-树索引一页默认可以存储16k（可以一次将一页的数据放到内存中查找）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#b-树索引一页默认可以存储16k（可以一次将一页的数据放到内存中查找）"}},[_._v("#")]),_._v(" b+树索引一页默认可以存储"),t("strong",[_._v("16k")]),_._v("（可以一次将一页的数据放到内存中查找）")])]),_._v(" "),t("li",[t("p",[t("strong",[_._v("innodb下幻读是如何在RR级别下被解决的？")])]),_._v(" "),t("p",[_._v("innodb下的幻读是由"),t("strong",[_._v("MVCC")]),_._v(" 或者 "),t("strong",[_._v("GAP 锁")]),_._v(" 或者是"),t("strong",[_._v("next-key lock")]),_._v(" 解决的。")])]),_._v(" "),t("li",[t("h4",{attrs:{id:"索引的数据结构（底层）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引的数据结构（底层）"}},[_._v("#")]),_._v(" 索引的数据结构（底层）")]),_._v(" "),t("ul",[t("li",[_._v("二叉树")]),_._v(" "),t("li",[_._v("红黑树")]),_._v(" "),t("li",[_._v("B树")]),_._v(" "),t("li",[_._v("哈希表")])])]),_._v(" "),t("li",[t("h4",{attrs:{id:"索引为什么使用b-树不用b树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引为什么使用b-树不用b树"}},[_._v("#")]),_._v(" 索引为什么使用B+树不用B树")]),_._v(" "),t("p",[_._v("b树和b+树的区别是，b树上的节点会存储索引和数据，但是b+树只有叶子节点上存储数据，这样一页的数16k的容量来说，b+树能存储更多的索引。")]),_._v(" "),t("p",[_._v("另外，b+树的一个节点中的索引中间有个指针（默认占6个字节内存），用于指向下一块文件地址或索引对应字段的所有数据。")])]),_._v(" "),t("li",[t("h4",{attrs:{id:"索引为什么不用哈希"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引为什么不用哈希"}},[_._v("#")]),_._v(" 索引为什么不用哈希")]),_._v(" "),t("p",[t("strong",[_._v("1.hash表只能匹配是否相等，不能实现范围查找")])]),_._v(" "),t("p",[_._v("select * from xx where id > 23; 这时就没办法索引了")]),_._v(" "),t("p",[t("strong",[_._v("2.当需要按照索引进行order by时，hash值没办法支持排序")])]),_._v(" "),t("p",[_._v("select * from xx order by score desc;如果score为建立索引的字段，hash值没办法辅助排序。")]),_._v(" "),t("p",[t("strong",[_._v("3.组合索引可以支持部分索引查询，如(a,b,c)的组合索引，查询中只用到了阿和b也可以查询的，如果使用hash表，组合索引会将几个字段合并hash，没办法支持部分索引")])]),_._v(" "),t("p",[t("strong",[_._v("4.当数据量很大时，hash冲突的概率也会非常大")])])]),_._v(" "),t("li",[t("h4",{attrs:{id:"索引为什么要用整形递增"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引为什么要用整形递增"}},[_._v("#")]),_._v(" 索引为什么要用整形递增?")]),_._v(" "),t("p",[_._v("整形比较方便，速度快。递增满足b+树的结构，由左向右添加节点。如果添加的字段索引是随机的，那么可能会破坏之前排序的结构，重新平衡改变树的结构，造成很大的性能损耗。")])]),_._v(" "),t("li",[t("h4",{attrs:{id:"索引的分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引的分类"}},[_._v("#")]),_._v(" 索引的分类")]),_._v(" "),t("p",[t("strong",[_._v("普通索引")]),_._v("（单个索引）")]),_._v(" "),t("p",[t("code",[_._v("CREATE INDEX mycolumn_index ON mytable (myclumn)")])]),_._v(" "),t("p",[t("strong",[_._v("主键索引")])]),_._v(" "),t("p",[_._v("它是一种特殊的唯一索引，不允许有空值。一般是在建表的时候指定了主键，就会创建主键索引， CREATE INDEX不能用来创建主键索引，使用 ALTER TABLE来代替。")]),_._v(" "),t("p",[t("code",[_._v("ALTER TABLE table_name ADD PRIMARY KEY ( column )")])]),_._v(" "),t("p",[t("strong",[_._v("唯一索引")]),_._v("：保证在索引列中的全部数据是唯一的，对聚簇索引和非聚簇索引都可以使用，"),t("strong",[_._v("比如name列已经存在了joker，当又要插入joker的时候，就会报错")]),_._v("。")]),_._v(" "),t("p",[t("code",[_._v("CREATE UNIQUE INDEX myclumn_cindex ON mytable(mycolumn)")])]),_._v(" "),t("p",[t("strong",[_._v("全文索引")]),_._v("：FULLTEXT索引用于全文搜索（搜索引擎）。只有InnoDB和 MyISAM存储引擎支持 FULLTEXT索引和仅适用于 CHAR， VARCHAR和 TEXT列。")]),_._v(" "),t("p",[t("code",[_._v("ALTER TABLE table_name ADD FULLTEXT ( column )")])]),_._v(" "),t("p",[t("strong",[_._v("组合索引")])]),_._v(" "),t("p",[t("code",[_._v("CREATE INDEX index_name ON table_name(col1,col2)")])]),_._v(" "),t("p",[_._v("删除索引的语句")]),_._v(" "),t("p",[t("code",[_._v("ALTER TABLE mytable DROP INDEX indexname;")])])]),_._v(" "),t("li",[t("h4",{attrs:{id:"聚簇索引与非聚簇索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#聚簇索引与非聚簇索引"}},[_._v("#")]),_._v(" 聚簇索引与非聚簇索引")])])]),_._v(" "),t("p",[_._v("聚簇索引指的是索引指向即是数据。")]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("非聚簇索引指的是索引指向的是一个方向，比如说数据的内存地址，然后再根据内存地址去查找数据。\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br")])]),t("ol",{attrs:{start:"11"}},[t("li",[t("h4",{attrs:{id:"建立索引的考虑因素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#建立索引的考虑因素"}},[_._v("#")]),_._v(" 建立索引的考虑因素")]),_._v(" "),t("p",[_._v("1、建立索引的字段区分度要高，如果索引字段很多重复的话，说明区分度就不高，查询起来效率提升很少。")]),_._v(" "),t("p",[_._v("2、设置的字段最好是整形递增的，类似id。因为这样才符合B+树的结构，如果使用类似UUID这样的随机字段作为索引可能会导致插入的时候造成索引结构严重改变的问题。随机IO严重。")]),_._v(" "),t("p",[_._v("3、根据需要来建立索引")])]),_._v(" "),t("li",[t("h4",{attrs:{id:"使用索引的注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用索引的注意事项"}},[_._v("#")]),_._v(" 使用索引的注意事项")]),_._v(" "),t("p",[_._v("（1）避免属性隐试转换 ， 如定义Moblie varchar  where Moblie =198989888会导致全表扫描；")]),_._v(" "),t("p",[_._v('（2）查询的时候，索引不要进行运算（"name"+1=2 或者 max（name)=3）；')]),_._v(" "),t("p",[_._v("（3）不要用SELECT *，填上需要查询的字段；")]),_._v(" "),t("p",[_._v("(4)  "),t("strong",[_._v("最左前缀原则")]),_._v("，条件因从最左边的索引开始，不能跳过中间的索引。")]),_._v(" "),t("p",[_._v("（5)"),t("strong",[_._v("少用or")])]),_._v(" "),t("p",[_._v("（6）"),t("strong",[_._v("禁止负向查询")]),_._v("： NOT、！=、<>、！<、！>、NOT IN、NOT LIKE，会导致全表扫描；")]),_._v(" "),t("p",[_._v("（7）大表之间的join，"),t("strong",[_._v("尽量缩小结果集之后再join")]),_._v("，否则会消耗较多的内存和CPU；")]),_._v(" "),t("p",[_._v("（8）搜索"),t("strong",[_._v("严禁左模糊或者全模糊")]),_._v("（like %XX, 或like %XX%），会导致全表扫描。")])]),_._v(" "),t("li",[t("h4",{attrs:{id:"事务特性（acid）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务特性（acid）"}},[_._v("#")]),_._v(" 事务特性（ACID）")]),_._v(" "),t("p",[t("strong",[_._v("原子性")])]),_._v(" "),t("p",[_._v("指整个数据库事务是不可分割的工作单位。只有使据库中所有的操作执行成功，才算整个事务成功；事务中任何一个SQL语句执行失败，那么已经执行成功的SQL语句也必须撤销，数据库状态应该退回到执行事务前的状态。")]),_._v(" "),t("p",[t("strong",[_._v("一致性")])]),_._v(" "),t("p",[_._v("指数据库事务不能破坏关系数据的完整性以及业务逻辑上的一致性。例如对银行转帐事务，不管事务成功还是失败，应该保证事务结束后ACCOUNTS表中Tom和Jack的存款总额为2000元。")]),_._v(" "),t("p",[t("strong",[_._v("隔离性")])]),_._v(" "),t("p",[_._v("指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，"),t("strong",[_._v("事务不会查看到中间状态的数据")]),_._v("。")]),_._v(" "),t("p",[t("strong",[_._v("持久性")])]),_._v(" "),t("p",[_._v("指的是只要事务成功结束，它对数据库所做的更新就"),t("strong",[_._v("必须永久保存下")]),_._v("来。"),t("strong",[_._v("即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态")]),_._v("。")])]),_._v(" "),t("li",[t("h4",{attrs:{id:"事务隔离级别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务隔离级别"}},[_._v("#")]),_._v(" 事务隔离级别")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("未提交读（read uncommit)")]),_._v(" "),t("p",[_._v("允许脏读，也就是可能读取到其他会话中未提交事务修改的数据")])]),_._v(" "),t("li",[t("p",[_._v("提交读 (read commit)")]),_._v(" "),t("p",[_._v("只能读取到已经提交的数据。Oracle等多数数据库默认都是该级别 (不重复读)")])]),_._v(" "),t("li",[t("p",[_._v("可重复读 (repeatable read) 可重复读。")]),_._v(" "),t("p",[_._v("在同一个事务内的查询都是事务开始时刻一致的，InnoDB默认级别。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻象读")])]),_._v(" "),t("li",[t("p",[_._v("串行读 (read serializable)")]),_._v(" "),t("p",[_._v("完全串行化的读，每次读都需要获得"),t("strong",[_._v("表级共享锁，读写相互都会阻塞")])])])]),_._v(" "),t("p",[_._v("==================================================================================== 隔离级别                                                脏读                            不可重复读                                        幻读")]),_._v(" "),t("hr"),_._v(" "),t("p",[_._v("未提交读（Read uncommitted）      可能                              可能                       \t\t\t\t\t\t可能")]),_._v(" "),t("p",[_._v("已提交读（Read committed）          不可能                          可能                        \t\t\t\t\t\t可能")]),_._v(" "),t("p",[_._v("可重复读（Repeatable read）          不可能                          不可能                     \t\t\t\t\t\t可能")]),_._v(" "),t("p",[_._v("可串行化（Serializable ）                  不可能                           不可能                    \t\t\t\t\t不可能")]),_._v(" "),t("p",[_._v("====================================================================================")])]),_._v(" "),t("li",[t("h4",{attrs:{id:"多事务并发会造成的问题-脏读、不可重复读、幻读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多事务并发会造成的问题-脏读、不可重复读、幻读"}},[_._v("#")]),_._v(" 多事务并发会造成的问题(脏读、不可重复读、幻读)")])]),_._v(" "),t("li",[t("h4",{attrs:{id:"读锁与写锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#读锁与写锁"}},[_._v("#")]),_._v(" 读锁与写锁")]),_._v(" "),t("p",[_._v("读锁即使共享锁，写锁是排他锁。")]),_._v(" "),t("p",[_._v("多个客户端可以共享读锁，一起读数据，不能修改数据。")]),_._v(" "),t("p",[_._v("修改数据时，一个客户端获得了排他锁，其它客户端就不能再读或者写。")])]),_._v(" "),t("li",[t("h4",{attrs:{id:"mysql的工具分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql的工具分析"}},[_._v("#")]),_._v(" Mysql的工具分析")]),_._v(" "),t("p",[_._v("explain profile")])]),_._v(" "),t("li",[t("h4",{attrs:{id:"mybatis一级缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis一级缓存"}},[_._v("#")]),_._v(" MyBatis一级缓存")])]),_._v(" "),t("li",[t("h4",{attrs:{id:"mybatis二级缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis二级缓存"}},[_._v("#")]),_._v(" MyBatis二级缓存")])]),_._v(" "),t("li",[t("h4",{attrs:{id:"mybatis中的-和-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis中的-和-的区别"}},[_._v("#")]),_._v(" Mybatis中的#和$的区别")])]),_._v(" "),t("li",[t("h4",{attrs:{id:"高并发数据库设计（百万级数据库设计）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高并发数据库设计（百万级数据库设计）"}},[_._v("#")]),_._v(" 高并发数据库设计（百万级数据库设计）")])]),_._v(" "),t("li",[t("h4",{attrs:{id:"数据库优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库优化"}},[_._v("#")]),_._v(" 数据库优化")])]),_._v(" "),t("li",[t("h4",{attrs:{id:"主从复制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主从复制"}},[_._v("#")]),_._v(" 主从复制")])]),_._v(" "),t("li",[t("h4",{attrs:{id:"mysql数据引擎的选用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql数据引擎的选用"}},[_._v("#")]),_._v(" Mysql数据引擎的选用")])]),_._v(" "),t("li",[t("h4",{attrs:{id:"数据库连接池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库连接池"}},[_._v("#")]),_._v(" 数据库连接池")])]),_._v(" "),t("li",[t("h4",{attrs:{id:"mysql存储引擎myisam和innodb"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql存储引擎myisam和innodb"}},[_._v("#")]),_._v(" "),t("strong",[_._v("MySQL存储引擎MyISAM和InnoDB")])]),_._v(" "),t("p",[_._v("存储引擎的概念是作用于"),t("strong",[_._v("表")]),_._v("的。")]),_._v(" "),t("p",[_._v("MyISAM引擎在数据表中有三个文件："),t("strong",[_._v(".frm(表的框架），.MYD(存储表中数据)，.MYI(存储表的索引)")]),_._v("，使用的是"),t("strong",[_._v("非聚集索引")]),_._v("，即索引查到的叶子节点的数据对应的是数据所在的文件地址。"),t("strong",[_._v("即找到.MYI文件中的索引指向的地址，找到对应.MYD文件中的数据。")])]),_._v(" "),t("p",[_._v("InnoDB引擎则只有两个文件，.frm(表的框架），.IBD(存储表中"),t("strong",[_._v("索引加数据")]),_._v(")，使用的是"),t("strong",[_._v("聚集索引")])]),_._v(" "),t("p",[t("strong",[_._v("MyISAM只支持表锁，不支持行锁，锁粒度更小。InnoDB则都支持。")])]),_._v(" "),t("p",[_._v("INNODB 以主键排序存储；聚集索引只能是主键，存储所有数据；二级索引包含主键键值")]),_._v(" "),t("p",[t("img",{attrs:{src:"F:%5CtyporaImg%5C1581992471045.png",alt:"1581992471045"}})])])])])}),[],!1,null,null,null);v.default=s.exports}}]);