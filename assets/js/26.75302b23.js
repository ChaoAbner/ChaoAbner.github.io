(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{371:function(e,s,t){"use strict";t.r(s);var v=t(43),a=Object(v.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"什么是redis"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是redis"}},[e._v("#")]),e._v(" 什么是Redis")]),e._v(" "),t("p",[e._v("​\t\tRedis是c语言开发的一个高性能键值对（key-value）数据库。提供各种键值对基本类型来适应不同场景下的数据存储。Redis支持的数据类型如下：")]),e._v(" "),t("ul",[t("li",[e._v("字符串类型")]),e._v(" "),t("li",[e._v("散列类型（Hash）")]),e._v(" "),t("li",[e._v("字符串列表类型（list）")]),e._v(" "),t("li",[e._v("字符串集合类型（set）")]),e._v(" "),t("li",[e._v("有序字符串集合类型（sorted set）")])]),e._v(" "),t("h2",{attrs:{id:"redis应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis应用场景"}},[e._v("#")]),e._v(" Redis应用场景")]),e._v(" "),t("ul",[t("li",[e._v("缓存（数据查询，短链接，新闻内容，商品内容等等） 最常用")]),e._v(" "),t("li",[e._v("聊天室的在线好友列表")]),e._v(" "),t("li",[e._v("任务队列（秒杀，抢购，12306等）")]),e._v(" "),t("li",[e._v("应用排行榜")]),e._v(" "),t("li",[e._v("网站访问统计")]),e._v(" "),t("li",[e._v("数据过期处理")]),e._v(" "),t("li",[e._v("分布式集群架构中的sesstion分离。")])]),e._v(" "),t("h2",{attrs:{id:"redis安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis安装"}},[e._v("#")]),e._v(" Redis安装")]),e._v(" "),t("h3",{attrs:{id:"ubuntu-16-04安装redis"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ubuntu-16-04安装redis"}},[e._v("#")]),e._v(" ubuntu 16.04安装redis")]),e._v(" "),t("h4",{attrs:{id:"方式一-：apt安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方式一-：apt安装"}},[e._v("#")]),e._v(" 方式一 ：apt安装")]),e._v(" "),t("p",[e._v("在 Ubuntu 系统安装 Redi 可以使用以下命令:")]),e._v(" "),t("p",[t("code",[e._v("sudo apt-get update")]),e._v(" "),t("code",[e._v("sudo apt-get install redis-server")]),e._v("\n启动 Redis\n"),t("code",[e._v("redis-server")]),e._v("\n查看 redis 是否启动？\n"),t("code",[e._v("redis-cli")]),e._v("\n以上命令将打开以下终端：")]),e._v(" "),t("p",[t("code",[e._v("redis 127.0.0.1:6379>")]),e._v("\n127.0.0.1 是本机 IP ，6379 是 redis 服务端口。现在我们输入 PING 命令。")]),e._v(" "),t("p",[t("code",[e._v("redis 127.0.0.1:6379> ping")]),e._v(" "),t("code",[e._v("PONG")]),e._v("\n以上说明我们已经成功安装了redis。")]),e._v(" "),t("h4",{attrs:{id:"方式二：编译安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方式二：编译安装"}},[e._v("#")]),e._v(" 方式二：编译安装")]),e._v(" "),t("p",[e._v("保证网络畅通，选定好下载工作路径，执行以下命令下载redis-5.0.7：")]),e._v(" "),t("p",[t("code",[e._v("sudo wget http://download.redis.io/releases/redis-5.0.7.tar.gz")])]),e._v(" "),t("p",[e._v("解压该文件：")]),e._v(" "),t("p",[t("code",[e._v("sudo tar -zxvf redis-5.0.7.tar.gz")])]),e._v(" "),t("p",[e._v("会在当前目录下生成文件夹redis-5.0.7，我把它移动到了/usr/redis目录下：\n　　\n　　如果没有安装gcc，需要先安装：")]),e._v(" "),t("p",[t("code",[e._v("sudo apt-get install gcc")])]),e._v(" "),t("p",[e._v("进入到redis-5.0.7目录下，依次执行下面两条命令进行编译：")]),e._v(" "),t("p",[t("code",[e._v("sudo make")]),e._v(" "),t("code",[e._v("sudo make install")])]),e._v(" "),t("p",[e._v("​\t\t会安装到目录/usr/local/bin下： 　\n　\n　　现在进入先前解压后得到的文件夹（我的在/usr/redis），复制配置文件redis.conf到/etc/redis/下，并用vi命令编辑该文件，"),t("strong",[e._v("将“daemonize no”修改为“daemonize yes”")]),e._v("，即设置成作为后台进程运行，修改完成后保存退出。\n　　\n　　进入到/usr/local/bin目录下，执行命令：（默认端口6379）")]),e._v(" "),t("p",[t("code",[e._v("redis-server /etc/redis/redis.conf")]),e._v(" "),t("code",[e._v("redis-cli -p 6379")])]),e._v(" "),t("p",[e._v("然后执行命令ping，若输出为pong，则证明服务成功启动。\n　　\n执行quit命令退出，现在可以通过下面的命令查看到该进程：")]),e._v(" "),t("p",[t("code",[e._v("ps -ef|grep redis")])]),e._v(" "),t("p",[t("strong",[e._v("如何停止服务器")])]),e._v(" "),t("p",[e._v("在客户端里面输入shutdown命令即可，退出客户端用exit")]),e._v(" "),t("p",[t("strong",[e._v("如何卸载redis服务")])]),e._v(" "),t("p",[e._v("卸载redis服务，只需把/usr/local/目录下的redis删除即可")]),e._v(" "),t("p",[e._v("为了卸载干净，可以把解压和编译的redis包也给删除了")]),e._v(" "),t("h2",{attrs:{id:"redis操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis操作"}},[e._v("#")]),e._v(" Redis操作")]),e._v(" "),t("p",[e._v("redis-cli连接上数据库后，既可以在命令行发送命令")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ping")]),e._v(" 数据库连接成功，则返回pong")])]),e._v(" "),t("h3",{attrs:{id:"存储string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#存储string"}},[e._v("#")]),e._v(" 存储String")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("set")]),e._v(" 设置指定key的内容")]),e._v(" "),t("li",[t("code",[e._v("get")]),e._v(" 获取指定key的内容")]),e._v(" "),t("li",[t("code",[e._v("del")]),e._v(" 删除指定key的内容")]),e._v(" "),t("li",[t("code",[e._v("keys *")]),e._v(" 查看当前库中所有的key值")])]),e._v(" "),t("h3",{attrs:{id:"存储hash"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#存储hash"}},[e._v("#")]),e._v(" 存储Hash")]),e._v(" "),t("h4",{attrs:{id:"赋值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#赋值"}},[e._v("#")]),e._v(" 赋值")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("hset field key value")]),e._v("\t在某个field中为指定的key存储value")]),e._v(" "),t("li",[t("code",[e._v("hmset filed key value [key1 value1..]")]),e._v(" 在某个field中为指定的多个key存储value")])]),e._v(" "),t("h4",{attrs:{id:"取值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#取值"}},[e._v("#")]),e._v(" 取值")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("hget field key")]),e._v("  在某个field中获取指定的key对应的value")]),e._v(" "),t("li",[t("code",[e._v("hmget field key [key1...]")]),e._v("  在某个field中获取指定的多个key对应的value")]),e._v(" "),t("li",[t("code",[e._v("hgetall field")]),e._v("  在某个field中所有的key-value")])]),e._v(" "),t("h4",{attrs:{id:"删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除"}},[e._v("#")]),e._v(" 删除")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("del field")]),e._v(" 删除整个field")]),e._v(" "),t("li",[t("code",[e._v("hdel field key [key1...]")]),e._v("  删除某个field中指定的一个或多个字段")])]),e._v(" "),t("h4",{attrs:{id:"增加数字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#增加数字"}},[e._v("#")]),e._v(" 增加数字")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("hincriby field key increment")]),e._v("  设置某个field中的key对应的值增加increment，如age增加5")])]),e._v(" "),t("h4",{attrs:{id:"自学命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自学命令"}},[e._v("#")]),e._v(" 自学命令")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("hexists field key")]),e._v(" 判断某个field中是否存在指定的key")]),e._v(" "),t("li",[t("code",[e._v("hlen field")]),e._v("  获取某个field中key的数量")]),e._v(" "),t("li",[t("code",[e._v("hkeys field")]),e._v("  获取某个field中所有的key")]),e._v(" "),t("li",[t("code",[e._v("hvals field")]),e._v("  谋取某个field中所有的value")])]),e._v(" "),t("h3",{attrs:{id:"存储list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#存储list"}},[e._v("#")]),e._v(" 存储list")]),e._v(" "),t("h4",{attrs:{id:"添加操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加操作"}},[e._v("#")]),e._v(" 添加操作")]),e._v(" "),t("p",[t("code",[e._v("lpush list value1 value2...")]),e._v("：在指定的key所关联的list的头部插入所有的values，如果该key不存在，该命令在插入的之前创建一个与该key关联的空链\t表，之后再向该链表的头部插入数据。插入成功，返回元素的个数。")]),e._v(" "),t("p",[t("code",[e._v("rpush list value1、value2…")]),e._v("：在该list的尾部添加元素")]),e._v(" "),t("h4",{attrs:{id:"查看操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看操作"}},[e._v("#")]),e._v(" 查看操作")]),e._v(" "),t("p",[t("code",[e._v("lrange list start end")]),e._v("：获取链表中从start到end的元素的值，start、end可\t为负数，若为-1则表示链表尾部的元素，-2则表示倒数第二个，依次类推…")]),e._v(" "),t("p",[t("code",[e._v("lpushx list value")]),e._v("：仅当参数中指定的key存在时（如果与key管理的list中没\t有值时，则该key是不存在的）在指定的key所关联的list的头部插入value。")]),e._v(" "),t("p",[t("strong",[t("code",[e._v("rpushx list value")])]),e._v("：在该list的尾部添加元素")]),e._v(" "),t("h4",{attrs:{id:"两端弹出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#两端弹出"}},[e._v("#")]),e._v(" 两端弹出")]),e._v(" "),t("p",[t("strong",[t("code",[e._v("lpop list")])]),e._v("：从头部弹出元素。")]),e._v(" "),t("p",[t("strong",[t("code",[e._v("rpop list")])]),e._v("：从尾部弹出元素。")]),e._v(" "),t("p",[t("strong",[t("code",[e._v("rpoplpush resource destination")])]),e._v("： 将链表尾部弹出并添加到另一个链表的头部")]),e._v(" "),t("h4",{attrs:{id:"获取元素个数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取元素个数"}},[e._v("#")]),e._v(" 获取元素个数")]),e._v(" "),t("p",[t("code",[e._v("llen list")]),e._v("：返回指定的key关联的链表中的元素的数量。")]),e._v(" "),t("p",[t("strong",[t("code",[e._v("lset list index value")])]),e._v("：设置链表中的index的脚标的元素值，0代表链表的头元\t素，-1代表链表的尾元素。")]),e._v(" "),t("p",[t("code",[e._v("lrem list count value")]),e._v("：删除count个值为value的元素，如果count大于0，从头向尾遍历并删除count个值为value的元素，如果count小于0，则从尾向头遍历并删除。如果count等于0，则删除链表中所有等于value的元素")]),e._v(" "),t("p",[t("strong",[t("code",[e._v("linsert list before|after pivot value")])]),e._v("：在pivot元素前或者后插入value这个元素。")]),e._v(" "),t("h4",{attrs:{id:"应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[e._v("#")]),e._v(" 应用场景")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://img.fosuchao.com/20200228170827.png",alt:""}})]),e._v(" "),t("h3",{attrs:{id:"set存储"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set存储"}},[e._v("#")]),e._v(" set存储")]),e._v(" "),t("p",[e._v("​\t\t添加、删除和判断某一元素是否存在等操作的时间复杂度为O(1)，元素不能重复。")]),e._v(" "),t("h4",{attrs:{id:"添加-删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加-删除"}},[e._v("#")]),e._v(" 添加/删除")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("sadd set values[val1, val2...]")]),e._v(" 向set中添加一个或多个元素")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("srem set menbers[member1, menber2... ]")]),e._v(" 删除set中指定一个或多个成员。")])])]),e._v(" "),t("h4",{attrs:{id:"获取元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取元素"}},[e._v("#")]),e._v(" 获取元素")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("smembers set")]),e._v(" 获取set中所有元素")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("sismember set member")]),e._v(" 判断指定member是否存在于该set中，1表示存在，0表示不存在或者set不存在")])])]),e._v(" "),t("h4",{attrs:{id:"差集运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#差集运算"}},[e._v("#")]),e._v(" 差集运算")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("sdiff set1 set2")]),e._v("  返回set1与set2中相差的成员。")])]),e._v(" "),t("p",[t("img",{attrs:{src:"http://img.fosuchao.com/20200228170841.png",alt:""}})]),e._v(" "),t("h4",{attrs:{id:"交集运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#交集运算"}},[e._v("#")]),e._v(" 交集运算")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("sinter set1 set2 set3 ...")]),e._v("  返回指定集合中都有的成员")])]),e._v(" "),t("h4",{attrs:{id:"并集运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并集运算"}},[e._v("#")]),e._v(" 并集运算")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("sunion set1 set2 set3...")]),e._v(" 返回指定集合的并集")])]),e._v(" "),t("h4",{attrs:{id:"扩展命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扩展命令"}},[e._v("#")]),e._v(" 扩展命令")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("scard set")]),e._v(" 获取集合中成员的数量")]),e._v(" "),t("li",[t("code",[e._v("srandmember set")]),e._v(" 随机获取集合中的某个成员")]),e._v(" "),t("li",[t("code",[e._v("sdiffstore destination set1 set2")]),e._v("  将set1与set2的差集存储到destination上")]),e._v(" "),t("li",[t("code",[e._v("sinterstore destination set1 set2 ...")]),e._v(" \t将set1与set2等集合的交集存储到destination上")]),e._v(" "),t("li",[t("code",[e._v("sunionstore destination set1 set2 ...")]),e._v("  将set1与set2等集合的并集存储到destination上")])]),e._v(" "),t("h3",{attrs:{id:"sorted-set存储"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sorted-set存储"}},[e._v("#")]),e._v(" sorted set存储")]),e._v(" "),t("p",[e._v("不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。")]),e._v(" "),t("p",[e._v("有序集合的成员是唯一的,但分数(score)却可以重复。")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('redis 127.0.0.1:6379> ZADD database 1 redis\n(integer) 1\nredis 127.0.0.1:6379> ZADD database 2 mongodb\n(integer) 1\nredis 127.0.0.1:6379> ZADD database 3 mysql\n(integer) 1\nredis 127.0.0.1:6379> ZADD database 3 mysql\n(integer) 0\nredis 127.0.0.1:6379> ZADD database 4 mysql\n(integer) 0\nredis 127.0.0.1:6379> ZRANGE database 0 10 WITHSCORES\n1) "redis"\n2) "1"\n3) "mongodb"\n4) "2"\n5) "mysql"\n6) "4"\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br")])]),t("p",[t("a",{attrs:{href:"https://www.runoob.com/redis/redis-sorted-sets.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("常见命令"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"高级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高级"}},[e._v("#")]),e._v(" 高级")]),e._v(" "),t("p",[e._v("​\t\t进入"),t("a",{attrs:{href:"https://redis.io/download",target:"_blank",rel:"noopener noreferrer"}},[e._v("官网下载"),t("OutboundLink")],1),e._v("进行下载稳定版本，通过源码编译安装。通常把软件装到"),t("strong",[e._v("linux下面的/usr/local")]),e._v("下面。")]),e._v(" "),t("h3",{attrs:{id:"安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),t("p",[e._v("Download, extract and compile Redis with:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ wget http://download.redis.io/releases/redis-5.0.7.tar.gz\n$ tar xzf redis-5.0.7.tar.gz\n$ cd redis-5.0.7\n$ make\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("The binaries that are now compiled are available in the "),t("code",[e._v("src")]),e._v(" directory. Run Redis with:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 使用配置文件启动\n$ src/redis-server redis.conf\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("You can interact with Redis using the built-in client:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('# 启动客户端\n$ src/redis-cli\nredis> set foo bar\nOK\nredis> get foo\n"bar"\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("h3",{attrs:{id:"配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[e._v("#")]),e._v(" 配置")]),e._v(" "),t("p",[e._v("redis安装目录下有一个redis.conf文件，里面有所有的配置信息，包括持久化RDB，AOF配置，端口，访问IP，密码，集群等配置。")]),e._v(" "),t("h4",{attrs:{id:"后台运行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后台运行"}},[e._v("#")]),e._v(" 后台运行")]),e._v(" "),t("p",[e._v("修改配置文件中的"),t("code",[e._v("daemonize")]),e._v(",开启后台运行。")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("daemonize yes\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h4",{attrs:{id:"aof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aof"}},[e._v("#")]),e._v(" AOF")]),e._v(" "),t("h5",{attrs:{id:"开启aof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开启aof"}},[e._v("#")]),e._v(" 开启AOF")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://img.fosuchao.com/20200228103101.png",alt:""}})]),e._v(" "),t("h5",{attrs:{id:"aof配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aof配置"}},[e._v("#")]),e._v(" AOF配置")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://img.fosuchao.com/20200228103152.png",alt:""}})]),e._v(" "),t("p",[e._v("AOF持久化默认是每秒持久化一次"),t("strong",[e._v("修改的命令")]),e._v("（set，del...）")]),e._v(" "),t("p",[e._v("持久化方式：像aof文件中追加修改的命令。")]),e._v(" "),t("p",[e._v("当redis重启恢复的时候，执行aof中的所有命令即可恢复到上一次的状态。")]),e._v(" "),t("p",[t("code",[e._v("appendfsync everysec")])]),e._v(" "),t("h5",{attrs:{id:"aof重写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aof重写"}},[e._v("#")]),e._v(" AOF重写")]),e._v(" "),t("p",[e._v("为什么要AOF重写？因为当我们频繁对一个key进行修改的时候，会写入很多这个key 的命令，但是当重启载入数据的时候，我们只要最后一次修改的数据就可以了。不然非常消耗时间却又做了无用的事情。")]),e._v(" "),t("p",[t("strong",[e._v("如下执行命令")]),e._v("：")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://img.fosuchao.com/20200228103452.png",alt:""}})]),e._v(" "),t("p",[t("strong",[e._v("没有重写AOF")])]),e._v(" "),t("p",[t("img",{attrs:{src:"http://img.fosuchao.com/20200228103700.png",alt:""}})]),e._v(" "),t("p",[t("strong",[e._v("重写AOF")])]),e._v(" "),t("p",[e._v("手动将aof文件进行减肥操作。")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 使用aof重写命令\nbgrewriteaof\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[t("img",{attrs:{src:"http://img.fosuchao.com/20200228104804.png",alt:""}})]),e._v(" "),t("p",[e._v("通过上面的命令即可，执行完可以看到aof文件的改变如下：")]),e._v(" "),t("p",[t("strong",[e._v("将命令变成最后一次执行的命令")])]),e._v(" "),t("p",[t("img",{attrs:{src:"http://img.fosuchao.com/20200228105036.png",alt:""}})]),e._v(" "),t("p",[t("strong",[e._v("默认配置")])]),e._v(" "),t("p",[e._v("aof重写的默认配置如下，我们自己也可以进行修改")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("aof文件大小翻倍的时候进行重写")])]),e._v(" "),t("li",[t("p",[e._v("只有在aof文件大小超过64mb的情况下才会进行重写")])])]),e._v(" "),t("p",[t("strong",[t("img",{attrs:{src:"http://img.fosuchao.com/20200228105158.png",alt:""}})])]),e._v(" "),t("h4",{attrs:{id:"混合持久化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#混合持久化"}},[e._v("#")]),e._v(" 混合持久化")]),e._v(" "),t("p",[e._v("结合AOF和RDB的优缺点，我们可以使用混合持久化的方式，提高了重启恢复的速度。又提升了持久化的速度。")]),e._v(" "),t("p",[e._v("混合持久化也是一种aof持久化。因为数据都是保存再aof文件中")]),e._v(" "),t("p",[t("strong",[e._v("开启混合持久化")])]),e._v(" "),t("p",[e._v("redis.conf中的 "),t("code",[e._v("aof-use-rdb-preamble")]),e._v("设置为"),t("code",[e._v("yes")])]),e._v(" "),t("p",[e._v("混合持久化中aof文件的结构：")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://img.fosuchao.com/20200228104405.png",alt:""}})]),e._v(" "),t("p",[e._v("aof文件上面保存的式RDB的二进制格式的数据快照。如果客户端继续有修改的命令，则通过追加写入到aof文件中。")]),e._v(" "),t("h3",{attrs:{id:"集群模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集群模式"}},[e._v("#")]),e._v(" 集群模式")]),e._v(" "),t("h4",{attrs:{id:"哨兵模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#哨兵模式"}},[e._v("#")]),e._v(" 哨兵模式")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://img.fosuchao.com/20200228151326.png",alt:""}})]),e._v(" "),t("p",[e._v("Redis3.0以前的版本要实现集群一般式借助哨兵"),t("code",[e._v("sentinel")]),e._v("工具来监控master节点的状态，如果节点异常，则会做主从切换，将某一台slave作为master。")]),e._v(" "),t("p",[e._v("哨兵的配置略微复杂，并且"),t("strong",[e._v("性能和高可用性等各方面表现一般")]),e._v("，特别是在主从切换的瞬间存在"),t("strong",[e._v("访问瞬断")]),e._v("的情况，而且哨兵模式"),t("strong",[e._v("只有一个主节点对外提供服务")]),e._v("，没法支持很高的并发，且单个主节点内存也不宜设置得过大，否则会导致持久化文件过大，影响数据恢复或主从同步的效率。")]),e._v(" "),t("p",[e._v("哨兵的缺点/不足")]),e._v(" "),t("ul",[t("li",[e._v("配置复杂")]),e._v(" "),t("li",[e._v("性能，高可用表现一般")]),e._v(" "),t("li",[e._v("存在访问瞬断的情况")]),e._v(" "),t("li",[e._v("只有一个主节点对外提供服务，无法支持很高的并发")]),e._v(" "),t("li",[e._v("持久化文件大可能会变得很大，影响数据恢复或主从同步效率")])]),e._v(" "),t("h5",{attrs:{id:"作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[e._v("#")]),e._v(" 作用")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Master 状态监测")])]),e._v(" "),t("li",[t("p",[e._v("如果Master 异常，则会进行Master-slave 转换，将其中一个Slave作为Master，将之前的Master作为Slave")])]),e._v(" "),t("li",[t("p",[e._v("Master-Slave切换后，master_redis.conf、slave_redis.conf和sentinel.conf的内容都会发生改变，即master_redis.conf中会多一行slaveof的配置，sentinel.conf的监控目标会随之调换")])])]),e._v(" "),t("h5",{attrs:{id:"工作方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工作方式"}},[e._v("#")]),e._v(" 工作方式")]),e._v(" "),t("ol",[t("li",[e._v("每个Sentinel以每秒钟一次的频率向它所知的"),t("strong",[e._v("Master")]),e._v("，"),t("strong",[e._v("Slave")]),e._v("以及其他 "),t("strong",[e._v("Sentinel")]),e._v(" 实例发送一个 PING 命令。")]),e._v(" "),t("li",[e._v("如果一个实例（instance）距离最后一次有效回复 PING 命令的"),t("strong",[e._v("时间超过")]),e._v(" "),t("code",[e._v("down-after-milliseconds")]),e._v(" 选项所指定的值， 则这个实例会被 Sentinel 标记为"),t("strong",[e._v("主观下线")]),e._v("。")]),e._v(" "),t("li",[e._v("如果一个Master被标记为主观下线，则正在监视这个Master的"),t("strong",[e._v("所有 Sentinel")]),e._v(" 要以每秒一次的频率确认Master的确进入了"),t("strong",[e._v("主观下线状态")]),e._v("。")]),e._v(" "),t("li",[e._v("当有足够数量的 Sentinel（大于等于配置文件指定的值）在指定的时间范围内确认Master的确进入了主观下线状态， 则"),t("strong",[e._v("Master会被标记为客观下线")]),e._v(" 。")]),e._v(" "),t("li",[e._v("在一般情况下， 每个 Sentinel 会以每 10 秒一次的频率向它已知的所有Master，Slave发送 INFO 命令 。")]),e._v(" "),t("li",[e._v("当Master被 Sentinel 标记为客观下线时，Sentinel 向下线的 Master 的所有 Slave 发送 INFO 命令的频率会从 10 秒一次改为每秒一次 。")]),e._v(" "),t("li",[e._v("若没有足够数量的 Sentinel 同意 Master 已经下线， Master 的客观下线状态就会被移除。")]),e._v(" "),t("li",[e._v("若 Master 重新向 Sentinel 的 PING 命令返回有效回复， Master 的主观下线状态就会被移除。")])]),e._v(" "),t("h5",{attrs:{id:"选举方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选举方式"}},[e._v("#")]),e._v(" 选举方式")]),e._v(" "),t("p",[e._v("选举一个哨兵中run id最小的。选举完成在轮流去看选的是谁。")]),e._v(" "),t("h5",{attrs:{id:"slave选举为master"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#slave选举为master"}},[e._v("#")]),e._v(" slave选举为master")]),e._v(" "),t("p",[e._v("在选举的时候，写数据进不来，被阻塞")]),e._v(" "),t("ul",[t("li",[e._v("slave的优先级（配置中可配置）")]),e._v(" "),t("li",[e._v("同步数据最多（偏移量最大的）")]),e._v(" "),t("li",[e._v("run id中最小的")])]),e._v(" "),t("h4",{attrs:{id:"高可用集群"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高可用集群"}},[e._v("#")]),e._v(" 高可用集群")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://img.fosuchao.com/20200228151358.png",alt:""}})]),e._v(" "),t("p",[e._v("redis集群是一个由"),t("strong",[e._v("多个主从节点群")]),e._v("组成的分布式服务器群，它具有复制、高可用和分片特性。Redis集群"),t("strong",[e._v("不需要sentinel哨兵也能完成节点移除和故障转移的功能")]),e._v("。需要将每个节点设置成集群模式，这种集群模式没有中心节点，可水平扩展，据官方文档称可以线性扩展到上万个节点(官方推荐不超过1000个节点)。redis集群的性能和高可用性均优于之前版本的哨兵模式，且集群配置非常简单")]),e._v(" "),t("h4",{attrs:{id:"搭建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#搭建"}},[e._v("#")]),e._v(" 搭建")]),e._v(" "),t("h5",{attrs:{id:"高可用集群的搭建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高可用集群的搭建"}},[e._v("#")]),e._v(" 高可用集群的搭建")]),e._v(" "),t("p",[t("strong",[e._v("redis安装")])]),e._v(" "),t("p",[e._v("下载地址：http://redis.io/download 安装步骤：")]),e._v(" "),t("p",[e._v("安装gcc"),t("code",[e._v("yum install gcc")])]),e._v(" "),t("p",[e._v("# 把下载好的redis-5.0.2.tar.gz放在/usr/local文件夹下，并解压")]),e._v(" "),t("p",[t("code",[e._v("wget http://download.redis.io/releases/redis-5.0.2.tar.gz tar xzf redis-5.0.2.tar.gz")])]),e._v(" "),t("p",[t("code",[e._v("cd redis-5.0.2")])]),e._v(" "),t("p",[t("strong",[e._v("进入到解压好的redis-5.0.2目录下，进行编译与安装")])]),e._v(" "),t("p",[t("code",[e._v("make & make install")])]),e._v(" "),t("p",[e._v("启动并指定配置文件")]),e._v(" "),t("p",[t("code",[e._v("src/redis-server redis.conf")]),e._v("（注意要使用后台启动，所以修改redis.conf里的daemonize改为yes)")]),e._v(" "),t("p",[e._v("验证启动是否成功")]),e._v(" "),t("p",[t("code",[e._v("ps -ef | grep redis")])]),e._v(" "),t("p",[e._v("进入redis客户端")]),e._v(" "),t("p",[t("code",[e._v("/usr/local/redis/bin/redis-cli")])]),e._v(" "),t("p",[e._v("退出客户端")]),e._v(" "),t("p",[t("code",[e._v("quit")])]),e._v(" "),t("p",[e._v("退出redis服务：")]),e._v(" "),t("p",[t("code",[e._v("（1）pkill redis-server")]),e._v(" "),t("code",[e._v("（2）kill 进程号 （3）src/redis-cli shutdown")])]),e._v(" "),t("p",[t("strong",[e._v("redis集群搭建")])]),e._v(" "),t("p",[e._v("redis集群需要"),t("strong",[e._v("至少要三个master节点")]),e._v("，我们这里搭建三个master节点，并且给每个master再搭建一个slave节点，总共6个redis节点，这里用三台机器部署6个redis实例，每台机器一主一从，搭建集群的步骤如下：")]),e._v(" "),t("p",[e._v("第一步：在第一台机器的/usr/local下创建文件夹redis-cluster，然后在其下面分别创建2个文件夾如下")]),e._v(" "),t("p",[e._v("（1）"),t("code",[e._v("mkdir -p /usr/local/redis-cluster")])]),e._v(" "),t("p",[e._v("（2）"),t("code",[e._v("mkdir 8001、 mkdir 8004")]),e._v("  第一步：把之前的redis.conf配置文件copy到8001下，修改如下内容：")]),e._v(" "),t("p",[e._v("（3）"),t("code",[e._v("daemonize yes")])]),e._v(" "),t("p",[e._v("（4）"),t("code",[e._v("port 8001")]),e._v("（分别对每个机器的端口号进行设置）")]),e._v(" "),t("p",[e._v("（5）"),t("code",[e._v("dir /usr/local/redis-cluster/8001/")]),e._v("（指定数据文件存放位置，必须要指定不同的目录位置，不然会丢失数据）")]),e._v(" "),t("p",[e._v("（6）"),t("code",[e._v("cluster-enabled yes")]),e._v("（启动集群模式）")]),e._v(" "),t("p",[e._v("（7）"),t("code",[e._v("cluster-config-file nodes-8001.conf")]),e._v("（集群节点信息文件，这里800x最好和port对应上）")]),e._v(" "),t("p",[e._v("（8）"),t("code",[e._v("cluster-node-timeout 5000")])]),e._v(" "),t("p",[e._v("(9)  "),t("code",[e._v("# bind 127.0.0.1")]),e._v("（去掉bind绑定访问ip信息）")]),e._v(" "),t("p",[e._v("(10)  "),t("code",[e._v("protected-mode no")]),e._v("   （关闭保护模式）")]),e._v(" "),t("p",[e._v("（11）"),t("code",[e._v("appendonly yes")])]),e._v(" "),t("p",[e._v("如果要设置密码需要增加如下配置：")]),e._v(" "),t("p",[e._v("（12）"),t("code",[e._v("requirepass 123456")]),e._v("     (设置redis访问密码)")]),e._v(" "),t("p",[e._v("（13）"),t("code",[e._v("masterauth 123456")]),e._v("      (设置集群节点间访问密码，跟上面一致)  第三步：把修改后的配置文件，copy到8002，修改第2、3、5项里的端口号，可以用批量替换： %s/源字符串/目的字符串/g")]),e._v(" "),t("p",[e._v("第二步：另外两台机器也需要做上面几步操作，第二台机器用8002和8005，第三台机器用8003和8006")]),e._v(" "),t("p",[e._v("第三步：分别启动6个redis实例，然后检查是否启动成功")]),e._v(" "),t("p",[e._v("（1）"),t("code",[e._v("/usr/local/redis-5.0.2/src/redis-server /usr/local/redis-cluster/800*/redis.conf")])]),e._v(" "),t("p",[e._v("（2）"),t("code",[e._v("ps -ef | grep redis")]),e._v(" 查看是否启动成功")]),e._v(" "),t("p",[e._v("第四步：用redis-cli创建整个redis集群(redis5以前的版本集群是依靠ruby脚本redis-trib.rb实现)")]),e._v(" "),t("p",[t("code",[e._v("/usr/local/redis-5.0.2/src/redis-cli -a 123456 --cluster create --cluster-replicas 1 192.168.0.61:8001 192.168.0.62:8002 192.168.0.63:8003 192.168.0.61:8004 192.168.0.62:8005 192.168.0.63:8006")])]),e._v(" "),t("p",[e._v("代表为每个创建的主服务器节点创建一个从服务器节点")]),e._v(" "),t("p",[e._v("第七步：验证集群：")]),e._v(" "),t("p",[e._v("（1）连接任意一个客户端即可："),t("code",[e._v("./redis-cli -c -h -p")]),e._v(" (-a访问服务端密码，-c表示集群模式，指定ip地址和端口号）如："),t("code",[e._v("/usr/local/redis-5.0.2/src/redis-cli -a 123456 -c -h 192.168.0.61 -p 800*")])]),e._v(" "),t("p",[e._v("（2）进行验证： "),t("code",[e._v("cluster info")]),e._v("（查看集群信息）、"),t("code",[e._v("cluster nodes")]),e._v("（查看节点列表） （3）进行数据操作验证")]),e._v(" "),t("p",[e._v("（4）关闭集群则需要逐个进行关闭，使用命令： "),t("code",[e._v("/usr/local/redis/bin/redis-cli -a 123456 -c -h 192.168.0.60 -p 800* shutdown")])]),e._v(" "),t("h4",{attrs:{id:"集群原理分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集群原理分析"}},[e._v("#")]),e._v(" 集群原理分析")]),e._v(" "),t("p",[e._v("Redis Cluster将所有数据划分为16384个槽（2^14），每个节点负责一部分的槽位，默认是平均分配槽位。")]),e._v(" "),t("p",[e._v("客户端连接时，会将集群的槽位信息缓存在客户端本地。这样当客户端查找一个key的时候，就根据定位算法算出key对应的相应槽位信息，在根据槽位信息存储到相应的服务器上。")]),e._v(" "),t("p",[e._v("同时因为槽位的信息可能会存在客户端与服务器不一致的情况，还需要纠正机制来实现槽位信息的校验调整。")]),e._v(" "),t("p",[t("strong",[e._v("槽位定位算法")])]),e._v(" "),t("p",[e._v("Cluster 默认会对 key 值使用 crc16 算法进行 hash 得到一个整数值，然后用这个整数值对 16384 进行取模来得到具体槽位。")]),e._v(" "),t("p",[t("code",[e._v("HASH_SLOT = CRC16(key) % 16384")])]),e._v(" "),t("p",[t("strong",[e._v("跳转重定位")])]),e._v(" "),t("p",[e._v("当客户端向一个错误的节点发出了指令，该节点会发现指令的 key 所在的槽位并不归自己管理，这时它会向客户端发送一个特殊的跳转指令携带目标操作的节点地址，告诉客户端去连这个节点去获取数据。客户端收到指令后除了"),t("strong",[e._v("跳转到正确的节点")]),e._v("上去操作，还会同步"),t("strong",[e._v("更新纠正本地的槽位映射表缓存")]),e._v("，后续所有 key 将使用新的槽位映射表。")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://img.fosuchao.com/20200228165314.png",alt:""}})]),e._v(" "),t("p",[t("strong",[e._v("网络抖动")])]),e._v(" "),t("p",[e._v("真实世界的机房网络往往并不是风平浪静的，它们经常会发生各种各样的小问题。比如网络抖动就是非常常见的一种现象，突然之间部分连接变得不可访问，然后很快又恢复正常。")]),e._v(" "),t("p",[e._v("为解决这种问题，Redis Cluster 提供了一种选项"),t("strong",[e._v("cluster-node-timeout")]),e._v("，表示当某个"),t("strong",[e._v("节点持续 timeout 的时间失联")]),e._v("时，才可以认定该节点出现故障，需要进行"),t("strong",[e._v("主从切换")]),e._v("。如果没有这个选项，网络抖动会导致主从频繁切换 (数据的重新复制)。")]),e._v(" "),t("h4",{attrs:{id:"集群的水平拓展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集群的水平拓展"}},[e._v("#")]),e._v(" 集群的水平拓展")]),e._v(" "),t("p",[e._v("查看redis集群的命令帮助")]),e._v(" "),t("p",[t("code",[e._v("redis-cli --cluster help")])]),e._v(" "),t("p",[t("img",{attrs:{src:"http://img.fosuchao.com/20200228165640.png",alt:""}})]),e._v(" "),t("ol",[t("li",[e._v("create：创建一个集群环境host1:port1 ... hostN:portN")]),e._v(" "),t("li",[e._v("call：可以执行redis命令")]),e._v(" "),t("li",[e._v("add-node：将一个节点添加到集群里，第一个参数为新节点的ip:port，第二个参数为集群中任意一个已经存在的节点的ip:port")]),e._v(" "),t("li",[e._v("del-node：移除一个节点")]),e._v(" "),t("li",[e._v("reshard：重新分片")]),e._v(" "),t("li",[e._v("check：检查集群状态")])]),e._v(" "),t("h4",{attrs:{id:"集群的选举原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集群的选举原理"}},[e._v("#")]),e._v(" 集群的选举原理")]),e._v(" "),t("p",[e._v("当slave发现自己的master变为FAIL状态时（心跳超过timeout时就会变成fail状态），便尝试进行Failover，以期成为新的master。由于挂掉的master可能会有多个slave，从而存在多个slave竞争成为master节点的过程， 其过程如下：")]),e._v(" "),t("ol",[t("li",[e._v("slave发现自己的master变为FAIL")]),e._v(" "),t("li",[e._v("将自己记录的集群currentEpoch加1，并广播"),t("code",[e._v("FAILOVER_AUTH_REQUEST")]),e._v(" 信息")]),e._v(" "),t("li",[e._v("其他节点收到该信息，只有master响应，判断请求者的合法性，并发送"),t("code",[e._v("FAILOVER_AUTH_ACK")]),e._v("，对每一个epoch只发送一次ack")]),e._v(" "),t("li",[e._v("尝试failover的slave收集"),t("code",[e._v("FAILOVER_AUTH_ACK")])]),e._v(" "),t("li",[t("strong",[e._v("超过半数后")]),e._v("变成新Master")]),e._v(" "),t("li",[e._v("广播"),t("strong",[e._v("Pong通知")]),e._v("其他集群节点。")])]),e._v(" "),t("p",[t("code",[e._v("currentEpoch")]),e._v("：选举轮数，集群中没进行一次选举，这个就会+1")])])}),[],!1,null,null,null);s.default=a.exports}}]);