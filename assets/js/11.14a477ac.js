(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{353:function(a,r,t){"use strict";t.r(r);var e=t(43),i=Object(e.a)({},(function(){var a=this,r=a.$createElement,t=a._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("这么多年来，数据压缩对我们来说是非常有用的。无论是在邮件中发送的图片用的zip文件还是在服务器压缩数据文件，我们都可以让下载更容易或者有效 的节约磁盘空间。某些压缩格式有时允许我们以60％的比率（甚至更高）压缩文件。下面我将会给大家演示如何用这些命令在Linux下面去压缩文件或者目 录。我们将学习zip, tar, tar.gz和tar.bz2等压缩格式的基本用法。这几个是在Linux里面常用的压缩格式。")]),a._v(" "),t("p",[a._v("在我们探究这些用法之前，我想先跟大家分享一下使用不同压缩格式的经验。当然，我这里讲到的只是其中的一些用法，除我讲到的之外，他们还有更多的地 方值得我们探讨。我已经意识到我需要了解两到三种压缩格式，才能更好的使用他们。zip格式是第一个需要了解的格式。因为它实际上已成为压缩文件的标准选 择，而且它在windows上也能使用。我经常用zip格式压缩那些需要共享给windows用户的文件。如果只是共享给linux用户或者Mac用户， 那我偏向于选择tar.gz格式。")]),a._v(" "),t("p",[a._v("ZIP")]),a._v(" "),t("p",[a._v("zip可能是目前使用得最多的文档压缩格式。它最大的优点就是在不同的操作系统平台，比如Linux， Windows以及Mac OS，上使用。缺点就是支持的压缩率不是很高，而tar.gz和tar.gz2在压缩率方面做得非常好。闲话少说，我们步入正题吧：")]),a._v(" "),t("p",[a._v("我们可以使用下列的命令压缩一个目录：")]),a._v(" "),t("h1",{attrs:{id:"zip-r-archive-name-zip-directory-to-compress"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zip-r-archive-name-zip-directory-to-compress"}},[a._v("#")]),a._v(" zip -r archive_name.zip directory_to_compress")]),a._v(" "),t("p",[a._v("下面是如果解压一个zip文档：")]),a._v(" "),t("h1",{attrs:{id:"unzip-archive-name-zip"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unzip-archive-name-zip"}},[a._v("#")]),a._v(" unzip archive_name.zip")]),a._v(" "),t("p",[a._v("TAR")]),a._v(" "),t("p",[a._v("Tar是在Linux中使用得非常广泛的文档打包格式。它的好处就是它只消耗非常少的CPU以及时间去打包文件，他仅仅只是一个打包工具，并不负责压缩。下面是如何打包一个目录：")]),a._v(" "),t("h1",{attrs:{id:"tar-cvf-archive-name-tar-directory-to-compress"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tar-cvf-archive-name-tar-directory-to-compress"}},[a._v("#")]),a._v(" tar -cvf archive_name.tar directory_to_compress")]),a._v(" "),t("p",[a._v("如何解包：")]),a._v(" "),t("h1",{attrs:{id:"tar-xvf-archive-name-tar-gz"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tar-xvf-archive-name-tar-gz"}},[a._v("#")]),a._v(" tar -xvf archive_name.tar.gz")]),a._v(" "),t("p",[a._v("上面这个解包命令将会将文档解开在当前目录下面。当然，你也可以用这个命令来捏住解包的路径：")]),a._v(" "),t("h1",{attrs:{id:"tar-xvf-archive-name-tar-c-tmp-extract-here"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tar-xvf-archive-name-tar-c-tmp-extract-here"}},[a._v("#")]),a._v(" tar -xvf archive_name.tar -C /tmp/extract_here/")]),a._v(" "),t("p",[a._v("TAR.GZ")]),a._v(" "),t("p",[a._v("这种格式是我使用得最多的压缩格式。它在压缩时不会占用太多CPU的，而且可以得到一个非常理想的压缩率。使用下面这种格式去压缩一个目录：")]),a._v(" "),t("h1",{attrs:{id:"tar-zcvf-archive-name-tar-gz-directory-to-compress"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tar-zcvf-archive-name-tar-gz-directory-to-compress"}},[a._v("#")]),a._v(" tar -zcvf archive_name.tar.gz directory_to_compress")]),a._v(" "),t("p",[a._v("解压缩：")]),a._v(" "),t("h1",{attrs:{id:"tar-zxvf-archive-name-tar-gz"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tar-zxvf-archive-name-tar-gz"}},[a._v("#")]),a._v(" tar -zxvf archive_name.tar.gz")]),a._v(" "),t("p",[a._v("上面这个解包命令将会将文档解开在当前目录下面。当然，你也可以用这个命令来捏住解包的路径：")]),a._v(" "),t("h1",{attrs:{id:"tar-zxvf-archive-name-tar-gz-c-tmp-extract-here"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tar-zxvf-archive-name-tar-gz-c-tmp-extract-here"}},[a._v("#")]),a._v(" tar -zxvf archive_name.tar.gz -C /tmp/extract_here/")]),a._v(" "),t("p",[a._v("TAR.BZ2")]),a._v(" "),t("p",[a._v("这种压缩格式是我们提到的所有方式中压缩率最好的。当然，这也就意味着，它比前面的方式要占用更多的CPU与时间。这个就是你如何使用tar.bz2进行压缩。")]),a._v(" "),t("h1",{attrs:{id:"tar-jcvf-archive-name-tar-bz2-directory-to-compress"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tar-jcvf-archive-name-tar-bz2-directory-to-compress"}},[a._v("#")]),a._v(" tar -jcvf archive_name.tar.bz2 directory_to_compress")]),a._v(" "),t("p",[a._v("上面这个解包命令将会将文档解开在当前目录下面。当然，你也可以用这个命令来捏住解包的路径：")]),a._v(" "),t("h1",{attrs:{id:"tar-jxvf-archive-name-tar-bz2-c-tmp-extract-here"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tar-jxvf-archive-name-tar-bz2-c-tmp-extract-here"}},[a._v("#")]),a._v(" tar -jxvf archive_name.tar.bz2 -C /tmp/extract_here/")]),a._v(" "),t("p",[a._v("数据压缩是非常有用的，尤其是对于备份来说。所以，你现在应该考虑在你的备份脚本中使用你在这里学到的压缩方式备份你基本的规则文件以减小你备份文件的大小。")]),a._v(" "),t("p",[a._v("过段时间之后，你就会意识到，在压缩率与CPU占用时间上会有一个平衡，你也要学会如何去权衡什么时候你需要一个快但是压缩率低，什么时候需要一个压缩率高但是CPU点用高的压缩方式，然后你才能避免无谓的空间与时间。")]),a._v(" "),t("p",[a._v("来源：http://www.simplehelp.net/2008/12/15/how-to-create-and-extract-zip-tar-targz-and-tarbz2-files-in-linux/")]),a._v(" "),t("p",[a._v("如果tar不支持j这个参数就先用\nbzip2 -d xxx.tar.bz2\n把它解压成.tar文件，然后再用\ntar xvf xxx.tar\n拆包。\n压缩解压\nlinux下怎么解后缀名是gzip的文件？\n1.以.a为扩展名的文件:\n#tar xv file.a\n2.以.z为扩展名的文件:\n#uncompress file.Z\n3.以.gz为扩展名的文件:\n#gunzip file.gz\n4.以.bz2为扩展名的文件:\n#bunzip2 file.bz2\n5.以.tar.Z为扩展名的文件:\n#tar xvZf file.tar.Z"),t("br"),a._v("\n或 #compress -dc file.tar.Z | tar xvf -\n6.以.tar.gz/.tgz为扩展名的文件:\n#tar xvzf file.tar.gz"),t("br"),a._v("\n或 gzip -dc file.tar.gz | tar xvf -\n7.以.tar.bz2为扩展名的文件:\n#tar xvIf file.tar.bz2"),t("br"),a._v("\n或 bzip2 -dc file.tar.bz2 | xvf -\n8.以.cpio.gz/.cgz为扩展名的文件:\n#gzip -dc file.cgz | cpio -div\n9.以.cpio/cpio为扩展名的文件:\n#cpio -div file.cpio"),t("br"),a._v("\n或cpio -divc file.cpio\n10.以.rpm为扩展名的文件安装:\n#rpm -i file.rpm\n11.以.rpm为扩展名的文件解压缩：\n#rpm2cpio file.rpm | cpio -div\n12.以.deb为扩展名的文件安装：\n#dpkg -i file.deb\n13.以.deb为扩展名的文件解压缩:\n#dpkg-deb --fsys-tarfile file.deb | tar xvf - ar p"),t("br"),a._v("\nfile.deb data.tar.gz | tar xvzf -\n14.以.zip为扩展名的文件:\n#unzip file.zip\n在linux下解压Winzip格式的文件\n　　要是装了jdk的话，可以用jar命令；还可以使用unzip命令。\n直接解压.tar.gz文件\n　　xxxx.tar.gz文件使用tar带zxvf参数，可以一次解压开。XXXX为文件名。 例如：\n$tar zxvf xxxx.tar.gz 各种压缩文件的解压（安装方法）")]),a._v(" "),t("p",[a._v("文件扩展名 解压（安装方法）")]),a._v(" "),t("p",[a._v(".a ar xv file.a\n.Z uncompress file.Z\n.gz gunzip file.gz\n.bz2 bunzip2 file.bz2\n.tar.Z tar xvZf file.tar.Z\ncompress -dc file.tar.Z | tar xvf -\n.tar.gz/.tgz tar xvzf file.tar.gz\ngzip -dc file.tar.gz | tar xvf -\n.tar.bz2 tar xvIf file.tar.bz2\nbzip2 -dc file.tar.bz2 | xvf -\n.cpio.gz/.cgz gzip -dc file.cgz | cpio -div\n.cpio/cpio cpio -div file.cpio\ncpio -divc file.cpio\n.rpm/install rpm -i file.rpm\n.rpm/extract rpm2cpio file.rpm | cpio -div\n.deb/install dpkg -i file.deb\n.deb/exrtact dpkg-deb --fsys-tarfile file.deb | tar xvf -\nar p file.deb data.tar.gz | tar xvzf -\n.zip unzip file.zip")]),a._v(" "),t("p",[a._v("bzip2 -d myfile.tar.bz2 | tar xvf")]),a._v(" "),t("p",[a._v("tar xvfz myfile.tar.bz2")]),a._v(" "),t("p",[a._v("x 是解压\nv 是复杂输出\nf 是指定文件\nz gz格式")]),a._v(" "),t("p",[a._v("gzip\ngzip[选项]要压缩（或解压缩）的文件名\n-c将输出写到标准输出上，并保留原有文件。\n-d将压缩文件压缩。\n-l对每个压缩文件，显示下列字段：压缩文件的大小，未压缩文件的大小、压缩比、未压缩文件的名字\n-r递归式地查找指定目录并压缩或压缩其中的所有文件。\n-t测试压缩文件是正完整。\n-v对每一个压缩和解压缩的文件，显示其文件名和压缩比。\n-num-用指定的数字调整压缩的速度。\n举例：\n把/usr目录并包括它的子目录在内的全部文件做一备份，备份文件名为usr.tar\ntar cvf usr.tar /home\n把/usr 目录并包括它的子目录在内的全部文件做一备份并进行压缩，备份文件名是usr.tar.gz\ntar czvf usr.tar.gz /usr\n压缩一组文件，文件的后缀为tar.gz\n#tar cvf back.tar /back/\n#gzip -q back.tar\nor\n#tar cvfz back.tar.gz /back/\n释放一个后缀为tar.gz的文件。\n#tar zxvf back.tar.gz\n#gzip back.tar.gz\n#tar xvf back.tar")]),a._v(" "),t("p",[a._v("tar的使用方法：")]),a._v(" "),t("p",[a._v("1：压缩一组文件为tar.gz后缀\ntar cvf backup.tar /etc\n或gzip -q backup.tar.gz")]),a._v(" "),t("p",[a._v("2:释放一个后缀为tar.gz的文件\ngunzip backup.tar.gz\n或tar xvf backup.tar")]),a._v(" "),t("p",[a._v("3:用一个命令完成压缩\ntar cvf -/etc | gzip -qc >; backup.tar.gz")]),a._v(" "),t("p",[a._v("4:用一个命令完成释放\ngunzip -c backup.tar.gz | tar xvf -")]),a._v(" "),t("p",[a._v("5:如何解开ta.Z的文件\ntar xvfz backup.tar.Z\n或uncompress backup.tar.Z\ntar xvf backup.tar")]),a._v(" "),t("p",[a._v("6:如何解开.tgz文件\ngunzip backup.tgz")]),a._v(" "),t("p",[a._v("7:如何压缩和解压缩.bz2的包\nbzip2 /etc/smb.conf 这将压缩文件smb.conf成smb.conf.bz2\nbunzip2 /etc/smb.conf.bz2 在当前目录下还原smb.conf.bz2为smb.conf")])])}),[],!1,null,null,null);r.default=i.exports}}]);