(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{385:function(t,s,e){"use strict";e.r(s);var a=e(43),_=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("h2",{attrs:{id:"什么是魔术方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是魔术方法"}},[t._v("#")]),t._v(" 什么是魔术方法?")]),t._v(" "),e("p",[t._v("他们是"),e("strong",[t._v("面向对象的Python的一切。他们是可以给你的类增加”magic”的特殊方法")]),t._v("。他们总是被"),e("strong",[t._v("双下划线所包围")]),t._v("(e.g. "),e("code",[t._v("__init__")]),t._v(" 或者 "),e("code",[t._v("__lt__")]),t._v(")。然而他们的文档却远没有提供应该有的内容。Python中所有的魔术方法均在Python官方文档中有相应描述，但是对于他们的描述比较混乱而且组织比较松散。很难找到有一个例子(也许他们原本打算的很好，在开始语言参考中有描述很详细，然而随之而来的确是枯燥的语法描述等等)。")]),t._v(" "),e("h2",{attrs:{id:"构造和初始化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构造和初始化"}},[t._v("#")]),t._v(" 构造和初始化")]),t._v(" "),e("p",[t._v("​\t\t每个人都知道一个最基本的魔术方法， "),e("code",[t._v("__init__")]),t._v(" 。通过此方法我们可以定义一个对象的初始操作。然而，当我调用 "),e("code",[t._v("x = SomeClass()")]),t._v(" 的时候， "),e("code",[t._v("__init__")]),t._v(" 并不是第一个被调用的方法。实际上，还有一个叫做 "),e("code",[t._v("__new__")]),t._v(" 的方法，来构造这个实例。然后给在开始创建时候的初始化函数来传递参数。在对象生命周期的另一端，也有一个 "),e("code",[t._v("__del__")]),t._v(" 方法。我们现在来近距离的看一看这三个方法:")]),t._v(" "),e("p",[e("code",[t._v("__new__(cls, [...)")]),t._v(" "),e("code",[t._v("__new__")]),t._v(" 是在"),e("strong",[t._v("一个对象实例化的时候所调用的第一个方法")]),t._v("。它的第一个参数是这个类，其他的参数是用来直接传递给 "),e("code",[t._v("__init__")]),t._v(" 方法。 "),e("code",[t._v("__new__")]),t._v(" 方法相当不常用,但是它有自己的特性，特别是当继承一个不可变的类型比如一个tuple或者string。我不希望在 "),e("code",[t._v("__new__")]),t._v(" 上有太多细节，因为并不是很有用处，但是在 "),e("a",{attrs:{href:"http://www.python.org/download/releases/2.2/descrintro/#__new__",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python文档"),e("OutboundLink")],1),t._v(" 中有详细的阐述。")]),t._v(" "),e("p",[e("code",[t._v("__init__(self, […)")]),t._v(" 此方法为类的初始化方法。当构造函数被调用的时候的任何参数都将会传给它。(比如如果我们调用 "),e("code",[t._v("x =SomeClass(10, 'foo')")]),t._v(")，那么 "),e("code",[t._v("__init__")]),t._v(" 将会得到两个参数10和foo。 "),e("code",[t._v("__init__")]),t._v(" 在Python的类定义中被广泛用到。")]),t._v(" "),e("p",[e("code",[t._v("__del__(self)")]),t._v(" 如果 "),e("code",[t._v("__new__")]),t._v(" 和 "),e("code",[t._v("__init__")]),t._v(" 是对象的构造器的话，那么 "),e("code",[t._v("__del__")]),t._v(" 就是析构器。它不实现语句 "),e("code",[t._v("del x")]),t._v(" (以上代码将不会翻译为 "),e("code",[t._v("x.__del__()")]),t._v(" )。"),e("strong",[t._v("它定义的是当一个对象进行垃圾回收时候的行为。当一个对象在删除的时需要更多的清洁工作的时候此方法会很有用，比如套接字对象或者是文件对象")]),t._v("。注意，如果解释器退出的时候对象还存存在，就不能保证 "),e("code",[t._v("__del__")]),t._v(" 能够被执行，所以 "),e("code",[t._v("__del__")]),t._v("can’t serve as a replacement for good coding practices ()~~~~~~~")]),t._v(" "),e("p",[t._v("放在一起的话，这里是一个 "),e("code",[t._v("__init__")]),t._v(" 和 "),e("code",[t._v("__del__")]),t._v(" 实际使用的例子。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("from os.path import join\n\nclass FileObject:\n    '''给文件对象进行包装从而确认在删除时文件流关闭'''\n\n    def __init__(self, filepath='~', filename='sample.txt'):\n        #读写模式打开一个文件\n        self.file = open(join(filepath, filename), 'r+')\n\n    def __del__(self):\n        self.file.close()\n        del self.file\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br")])]),e("h2",{attrs:{id:"让定制的类工作起来"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#让定制的类工作起来"}},[t._v("#")]),t._v(" 让定制的类工作起来")]),t._v(" "),e("p",[t._v("使用Python的魔术方法的最大优势在于他们提供了一种简单的方法来让对象可以表现的像内置类型一样。那意味着你可以避免丑陋的，违反直觉的，不标准的的操作方法。在一些语言中，有一些操作很常用比如：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("if instance.equals(other_instance):\n    # do something\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("在Python中你可以这样。但是这会让人迷惑且产生不必要的冗余。相同的操作因为不同的库会使用不同的名字，这样会产生不必要的工作。然而有了魔术方法的力量，我们可以定义一个方法(本例中为 "),e("code",[t._v("__eq__")]),t._v(" )，就说明了我们的意思：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("if instance == other_instance:\n        #do something\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("这只是魔术方法的功能的一小部分。它让你可以定义符号的含义所以我们可以在我们的类中使用。就像内置类型一样。")]),t._v(" "),e("h3",{attrs:{id:"用于比较的魔术方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用于比较的魔术方法"}},[t._v("#")]),t._v(" 用于比较的魔术方法")]),t._v(" "),e("p",[t._v("Python对实现对象的比较，使用魔术方法进行了大的逆转，使他们非常直观而不是笨拙的方法调用。而且还提供了一种方法可以重写Python对对象比较的默认行为(通过引用)。以下是这些方法和他们的作用。")]),t._v(" "),e("p",[e("code",[t._v("__cmp__(self, other)")]),t._v(" "),e("code",[t._v("__cmp__")]),t._v(" 是最基本的用于比较的魔术方法。它实际上实现了所有的比较符号(<,==,!=,etc.)，但是它的表现并不会总是如你所愿(比如，当一个实例与另一个实例相等是通过一个规则来判断，而一个实例大于另外一个实例是通过另外一个规则来判断)。如果 "),e("code",[t._v("self < other")]),t._v(" 的话 "),e("code",[t._v("__cmp__")]),t._v(" 应该返回一个负数，当 "),e("code",[t._v("self == other")]),t._v(" 的时候会返回0 ，而当 "),e("code",[t._v("self > other")]),t._v(" 的时候会返回正数。通常最好的一种方式是去分别定义每一个比较符号而不是一次性将他们都定义。但是 "),e("code",[t._v("__cmp__")]),t._v(" 方法是你想要实现所有的比较符号而一个保持清楚明白的一个好的方法。")]),t._v(" "),e("p",[e("code",[t._v("__eq__(self, other)")]),t._v(" 定义了等号的行为, "),e("code",[t._v("==")]),t._v(" 。")]),t._v(" "),e("p",[e("code",[t._v("__ne__(self, other)")]),t._v(" 定义了不等号的行为, "),e("code",[t._v("!=")]),t._v(" 。")]),t._v(" "),e("p",[e("code",[t._v("__lt__(self, other)")]),t._v(" 定义了小于号的行为， "),e("code",[t._v("<")]),t._v(" 。")]),t._v(" "),e("p",[e("code",[t._v("__gt__(self, other)")]),t._v(" 定义了大于等于号的行为， "),e("code",[t._v(">=")]),t._v(" 。")]),t._v(" "),e("p",[t._v("举一个例子，创建一个类来表现一个词语。我们也许会想要比较单词的字典序(通过字母表)，通过默认的字符串比较的方法就可以实现，但是我们也想要通过一些其他的标准来实现，比如单词长度或者音节数量。在这个例子中，我们来比较长度实现。以下是实现代码:")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Word(str):\n'''存储单词的类，定义比较单词的几种方法'''\n\n    def __new__(cls, word):\n        # 注意我们必须要用到__new__方法，因为str是不可变类型\n        # 所以我们必须在创建的时候将它初始化\n        if ' ' in word:\n            print \"Value contains spaces. Truncating to first space.\"\n            word = word[:word.index(' ')] #单词是第一个空格之前的所有字符\n        return str.__new__(cls, word)\n\n    def __gt__(self, other):\n        return len(self) > len(other)\n    def __lt__(self, other):\n        return len(self) < len(other)\n    def __ge__(self, other):\n        return len(self) >= len(other)\n    def __le__(self, other):\n        return len(self) <= len(other)\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br")])]),e("p",[t._v("现在，我们创建两个 "),e("code",[t._v("Words")]),t._v(" 对象(通过使用 "),e("code",[t._v("Word('foo')")]),t._v(" 和 "),e("code",[t._v("Word('bar')")]),t._v(" 然后通过长度来比较它们。注意，我们没有定义 "),e("code",[t._v("__eq__")]),t._v(" 和 "),e("code",[t._v("__ne__")]),t._v(" 方法。这是因为将会产生一些怪异的结果(比如 "),e("code",[t._v("Word('foo') == Word('bar')")]),t._v(" 将会返回true)。这对于测试基于长度的比较不是很有意义。所以我们退回去，用 "),e("code",[t._v("str")]),t._v(" 内置来进行比较。")]),t._v(" "),e("p",[t._v("现在你知道你不必定义每一个比较的魔术方法从而进行丰富的比较。标准库中很友好的在 "),e("code",[t._v("functiontols")]),t._v(" 中提供给我们一个类的装饰器定义了所有的丰富的比较函数。如果你只是定义 "),e("code",[t._v("__eq__")]),t._v(" 和另外一个(e.g. "),e("code",[t._v("__gt__")]),t._v(", "),e("code",[t._v("__lt__")]),t._v(",etc.)这个特性仅仅在Python 2.7中存在，但是你如果有机会碰到的话，那么将会节省大量的时间和工作量。你可以通过在你定义的类前放置 "),e("code",[t._v("@total_ordering")]),t._v(" 来使用。")]),t._v(" "),e("h3",{attrs:{id:"数值处理的魔术方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数值处理的魔术方法"}},[t._v("#")]),t._v(" 数值处理的魔术方法")]),t._v(" "),e("p",[t._v("如同你在通过比较符来比较类的实例的时候来创建很多方法，你也可以定义一些数值符号的特性。系紧你的安全带，来吧，这里有很多内容。为了组织方便，我将会把数值处理的方法来分成五类:一元操作符，普通算数操作符，反射算数操作符(之后会详细说明),增量赋值，和类型转换。")]),t._v(" "),e("h4",{attrs:{id:"一元操作符和函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一元操作符和函数"}},[t._v("#")]),t._v(" 一元操作符和函数")]),t._v(" "),e("p",[t._v("仅仅有一个操作位的一元操作符和函数。比如绝对值，负等。")]),t._v(" "),e("p",[e("code",[t._v("__pos__(self)")]),t._v(" 实现正号的特性(比如 "),e("code",[t._v("+some_object")]),t._v(")")]),t._v(" "),e("p",[e("code",[t._v("__neg__(self)")]),t._v(" 实现负号的特性(比如 "),e("code",[t._v("-some_object")]),t._v(")")]),t._v(" "),e("p",[e("code",[t._v("__abs__(self)")]),t._v(" 实现内置 "),e("code",[t._v("abs()")]),t._v(" 函数的特性。")]),t._v(" "),e("p",[e("code",[t._v("__invert__(self)")]),t._v(" 实现 "),e("code",[t._v("~")]),t._v(" 符号的特性。为了说明这个特性。你可以查看 "),e("a",{attrs:{href:"http://en.wikipedia.org/wiki/Bitwise_operation#NOT",target:"_blank",rel:"noopener noreferrer"}},[t._v("Wikipedia中的这篇文章"),e("OutboundLink")],1)]),t._v(" "),e("h4",{attrs:{id:"普通算数操作符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#普通算数操作符"}},[t._v("#")]),t._v(" 普通算数操作符")]),t._v(" "),e("p",[t._v("现在我们仅仅覆盖了普通的二进制操作符:+,-,*和类似符号。这些符号大部分来说都浅显易懂。")]),t._v(" "),e("p",[e("code",[t._v("__add__(self, other)")]),t._v(" 实现加法。 "),e("code",[t._v("__sub__(self, other)")]),t._v(" 实现减法。 "),e("code",[t._v("__mul__(self, other)")]),t._v(" 实现乘法。 "),e("code",[t._v("__floordiv__(self,other)")]),t._v(" 实现 "),e("code",[t._v("//")]),t._v(" 符号实现的整数除法。 "),e("code",[t._v("__div__(self, other)")]),t._v(" 实现 "),e("code",[t._v("/")]),t._v(" 符号实现的除法。 "),e("code",[t._v("__truediv__(self, other)")]),t._v(" 实现真除法。注意只有只用了 "),e("code",[t._v("from __future__ import division")]),t._v(" 的时候才会起作用。 "),e("code",[t._v("__mod__(self, other)")]),t._v(" 实现取模算法 "),e("code",[t._v("%")]),t._v(" "),e("code",[t._v("__divmod___(self,other)")]),t._v(" 实现内置 "),e("code",[t._v("divmod()")]),t._v(" 算法 "),e("code",[t._v("__pow__")]),t._v(" 实现使用 "),e("code",[t._v("**")]),t._v(" 的指数运算 "),e("code",[t._v("__lshift__(self, other)")]),t._v(" 实现使用 "),e("code",[t._v("<<")]),t._v(" 的按位左移动"),e("code",[t._v("__rshift__(self, other)")]),t._v(" 实现使用 "),e("code",[t._v(">>")]),t._v(" 的按位左移动 "),e("code",[t._v("__and__(self, other)")]),t._v(" 实现使用 "),e("code",[t._v("&")]),t._v(" 的按位与 "),e("code",[t._v("__or__(self, other)")]),t._v(" 实现使用 "),e("code",[t._v("|")]),t._v(" 的按位或 "),e("code",[t._v("__xor__(self, other)")]),t._v(" 实现使用 "),e("code",[t._v("^")]),t._v(" 的按位异或")]),t._v(" "),e("h4",{attrs:{id:"反运算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#反运算"}},[t._v("#")]),t._v(" 反运算")]),t._v(" "),e("p",[t._v("下面我将会讲解一些反运算的知识。有些概念你可能会认为恐慌或者是陌生。但是实际上非常简单。以下是一个例子:")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("some_object + other\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("这是一个普通的加法运算，反运算是相同的，只是把操作数调换了位置:")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("other + some_object\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("所以，除了当与其他对象操作的时候自己会成为第二个操作数之外，所有的这些魔术方法都与普通的操作是相同的。大多数情况下，反运算的结果是与普通运算相同的。所以你可以你可以将 "),e("code",[t._v("__radd__")]),t._v(" 与 "),e("code",[t._v("__add__")]),t._v(" 等价。")]),t._v(" "),e("p",[e("code",[t._v("__radd__(self, other)")]),t._v(" 实现反加 "),e("code",[t._v("__rsub__(self, other)")]),t._v(" 实现反减 "),e("code",[t._v("__rmul__(self, other)")]),t._v(" 实现反乘 "),e("code",[t._v("__rfloordiv__(self, other)")]),t._v("实现 "),e("code",[t._v("//")]),t._v(" 符号的反除 "),e("code",[t._v("__rdiv__(self, other)")]),t._v(" 实现 "),e("code",[t._v("/")]),t._v(" 符号的反除 "),e("code",[t._v("__rtruediv__(self, other)")]),t._v(" 实现反真除，只有当 "),e("code",[t._v("from __future__import division")]),t._v(" 的时候会起作用 "),e("code",[t._v("__rmod__(self, other)")]),t._v(" 实现 "),e("code",[t._v("%")]),t._v(" 符号的反取模运算 "),e("code",[t._v("__rdivmod__(self, other)")]),t._v(" 当 "),e("code",[t._v("divmod(other,self)")]),t._v(" 被调用时，实现内置 "),e("code",[t._v("divmod()")]),t._v(" 的反运算 "),e("code",[t._v("__rpow__")]),t._v(" 实现 "),e("code",[t._v("**")]),t._v(" 符号的反运算 "),e("code",[t._v("__rlshift__(self, other)")]),t._v(" 实现 "),e("code",[t._v("<<")]),t._v(" 符号的反左位移"),e("code",[t._v("__rrshift__(self, other)")]),t._v(" 实现 "),e("code",[t._v(">>")]),t._v(" 符号的反右位移 "),e("code",[t._v("__rand__(self, other)")]),t._v(" 实现 "),e("code",[t._v("&")]),t._v(" 符号的反与运算 "),e("code",[t._v("__ror__(self, other)")]),t._v(" 实现 "),e("code",[t._v("|")]),t._v("符号的反或运算 "),e("code",[t._v("__xor__(self, other)")]),t._v(" 实现 "),e("code",[t._v("^")]),t._v(" 符号的反异或运算")]),t._v(" "),e("h4",{attrs:{id:"增量赋值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#增量赋值"}},[t._v("#")]),t._v(" 增量赋值")]),t._v(" "),e("p",[t._v("Python也有大量的魔术方法可以来定制增量赋值语句。你也许对增量赋值已经很熟悉，它将操作符与赋值来结合起来。如果你仍然不清楚我在说什么的话，这里有一个例子：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("x = 5\nx += 1 # in other words x = x + 1\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[e("code",[t._v("__iadd__(self, other)")]),t._v(" 实现赋值加法 "),e("code",[t._v("__isub__(self, other)")]),t._v(" 实现赋值减法 "),e("code",[t._v("__imul__(self, other)")]),t._v(" 实现赋值乘法"),e("code",[t._v("__ifloordiv__(self, other)")]),t._v(" 实现 "),e("code",[t._v("//=")]),t._v(" 的赋值地板除 "),e("code",[t._v("__idiv__(self, other)")]),t._v(" 实现符号 "),e("code",[t._v("/=")]),t._v(" 的赋值除 "),e("code",[t._v("__itruediv__(self, other)")]),t._v("实现赋值真除,只有使用 "),e("code",[t._v("from __future__ import division")]),t._v(" 的时候才能使用 "),e("code",[t._v("__imod_(self, other)")]),t._v(" 实现符号 "),e("code",[t._v("%=")]),t._v(" 的赋值取模"),e("code",[t._v("__ipow__")]),t._v(" 实现符号 "),e("code",[t._v("**=")]),t._v(" 的赋值幂运算 "),e("code",[t._v("__ilshift__(self, other)")]),t._v(" 实现符号 "),e("code",[t._v("<<=")]),t._v(" 的赋值位左移 "),e("code",[t._v("__irshift__(self, other)")]),t._v(" 实现符号 "),e("code",[t._v(">>=")]),t._v(" 的赋值位右移 "),e("code",[t._v("__iand__(self, other)")]),t._v(" 实现符号 "),e("code",[t._v("&=")]),t._v(" 的赋值位与 "),e("code",[t._v("__ior__(self, other)")]),t._v(" 实现符号 "),e("code",[t._v("|=")]),t._v(" 的赋值位或"),e("code",[t._v("__ixor__(self, other)")]),t._v(" 实现符号 "),e("code",[t._v("|=")]),t._v(" 的赋值位异或")]),t._v(" "),e("h4",{attrs:{id:"类型转换魔术方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型转换魔术方法"}},[t._v("#")]),t._v(" 类型转换魔术方法")]),t._v(" "),e("p",[t._v("Python也有很多的魔术方法来实现类似 "),e("code",[t._v("float()")]),t._v(" 的内置类型转换特性。 "),e("code",[t._v("__int__(self)")]),t._v(" 实现整形的强制转换 "),e("code",[t._v("__long__(self)")]),t._v(" 实现长整形的强制转换 "),e("code",[t._v("__float__(self)")]),t._v(" 实现浮点型的强制转换 "),e("code",[t._v("__complex__(self)")]),t._v(" 实现复数的强制转换 "),e("code",[t._v("__oct__(self)")]),t._v(" 实现八进制的强制转换 "),e("code",[t._v("__hex__(self)")]),t._v(" 实现二进制的强制转换 "),e("code",[t._v("__index__(self)")]),t._v(" 当对象是被应用在切片表达式中时，实现整形强制转换，如果你定义了一个可能在切片时用到的定制的数值型,你应该定义 "),e("code",[t._v("__index__")]),t._v(" (详见PEP357) "),e("code",[t._v("__trunc__(self)")]),t._v(" 当使用 "),e("code",[t._v("math.trunc(self)")]),t._v(" 的时候被调用。 "),e("code",[t._v("__trunc__")]),t._v(" 应该返回数值被截取成整形(通常为长整形)的值 "),e("code",[t._v("__coerce__(self, other)")]),t._v(" 实现混合模式算数。如果类型转换不可能的话，那么 "),e("code",[t._v("__coerce__")]),t._v(" 将会返回 "),e("code",[t._v("None")]),t._v(" ,否则他将对 "),e("code",[t._v("self")]),t._v(" 和 "),e("code",[t._v("other")]),t._v(" 返回一个长度为2的tuple，两个为相同的类型。")]),t._v(" "),e("h2",{attrs:{id:"表现你的类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#表现你的类"}},[t._v("#")]),t._v(" 表现你的类")]),t._v(" "),e("p",[t._v("如果有一个字符串来表示一个类将会非常有用。在Python中，有很多方法可以实现类定义内置的一些函数的返回值。 "),e("code",[t._v("__str__(self)")]),t._v(" 定义当 "),e("code",[t._v("str()")]),t._v(" 调用的时候的返回值 "),e("code",[t._v("__repr__(self)")]),t._v(" 定义 "),e("code",[t._v("repr()")]),t._v(" 被调用的时候的返回值。 "),e("code",[t._v("str()")]),t._v(" 和 "),e("code",[t._v("repr()")]),t._v(" 的主要区别在于 "),e("code",[t._v("repr()")]),t._v(" 返回的是机器可读的输出，而 "),e("code",[t._v("str()")]),t._v(" 返回的是人类可读的。 "),e("code",[t._v("__unicode__(self)")]),t._v(" 定义当 "),e("code",[t._v("unicode()")]),t._v(" 调用的时候的返回值。 "),e("code",[t._v("unicode()")]),t._v(" 和 "),e("code",[t._v("str()")]),t._v(" 很相似，但是返回的是unicode字符串。注意，如a果对你的类调用 "),e("code",[t._v("str()")]),t._v(" 然而你只定义了 "),e("code",[t._v("__unicode__()")]),t._v(" ，那么将不会工作。你应该定义 "),e("code",[t._v("__str__()")]),t._v(" 来确保调用时能返回正确的值。")]),t._v(" "),e("p",[e("code",[t._v("__hash__(self)")]),t._v(" 定义当 "),e("code",[t._v("hash()")]),t._v(" 调用的时候的返回值，它返回一个整形，用来在字典中进行快速比较 "),e("code",[t._v("__nonzero__(self)")]),t._v(" 定义当 "),e("code",[t._v("bool()")]),t._v(" 调用的时候的返回值。本方法应该返回True或者False，取决于你想让它返回的值。")]),t._v(" "),e("h2",{attrs:{id:"控制属性访问"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#控制属性访问"}},[t._v("#")]),t._v(" 控制属性访问")]),t._v(" "),e("p",[t._v("许多从其他语言转到Python的人会抱怨它缺乏类的真正封装。(没有办法定义私有变量，然后定义公共的getter和setter)。Python其实可以通过魔术方法来完成封装。我们来看一下:")]),t._v(" "),e("p",[e("code",[t._v("__getattr__(self, name)")]),t._v(" 你可以定义当用户试图获取一个不存在的属性时的行为。这适用于对普通拼写错误的获取和重定向，对获取一些不建议的属性时候给出警告(如果你愿意你也可以计算并且给出一个值)或者处理一个 "),e("code",[t._v("AttributeError")]),t._v(" 。只有当调用不存在的属性的时候会被返回。然而，这不是一个封装的解决方案。 "),e("code",[t._v("__setattr__(self, name, value)")]),t._v(" 与 "),e("code",[t._v("__getattr__")]),t._v(" 不同， "),e("code",[t._v("__setattr__")]),t._v(" 是一个封装的解决方案。无论属性是否存在，它都允许你定义对对属性的赋值行为，以为这你可以对属性的值进行个性定制。但是你必须对使用 "),e("code",[t._v("__setattr__")]),t._v(" 特别小心。之后我们会详细阐述。 "),e("code",[t._v("__delattr__")]),t._v(" 与 "),e("code",[t._v("__setattr__")]),t._v(" 相同，但是功能是删除一个属性而不是设置他们。注意与 "),e("code",[t._v("__setattr__")]),t._v(" 相同，防止无限递归现象发生。(在实现 "),e("code",[t._v("__delattr__")]),t._v(" 的时候调用 "),e("code",[t._v("del self.name")]),t._v(" 即会发生) "),e("code",[t._v("__getattribute__(self,name)")]),t._v(" "),e("code",[t._v("__getattribute__")]),t._v(" 与它的同伴 "),e("code",[t._v("__setattr__")]),t._v(" 和 "),e("code",[t._v("__delattr__")]),t._v(" 配合非常好。但是我不建议使用它。只有在新类型类定义中才能使用 "),e("code",[t._v("__getattribute__")]),t._v(" (在最新版本Python中所有的类都是新类型，在老版本中你可以通过继承 "),e("code",[t._v("object")]),t._v(" 来制作一个新类。这样你可以定义一个属性值的访问规则。有时也会产生一些帝归现象。(这时候你可以调用基类的 "),e("code",[t._v("__getattribute__")]),t._v(" 方法来防止此现象的发生。)它可以消除对 "),e("code",[t._v("__getattr__")]),t._v(" 的使用，如果它被明确调用或者一个 "),e("code",[t._v("AttributeError")]),t._v(" 被抛出，那么当实现 "),e("code",[t._v("__getattribute__")]),t._v(" 之后才能被调用。此方法是否被使用其实最终取决于你的选择。)我不建议使用它因为它的使用几率较小(我们在取得一个值而不是设置一个值的时候有特殊的行为是非常罕见的。)而且它不能避免会出现bug。")]),t._v(" "),e("p",[t._v("在进行属性访问控制定义的时候你可能会很容易的引起一个错误。考虑下面的例子。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("def __setattr__(self, name, value):\n    self.name = value\n    #每当属性被赋值的时候， ``__setattr__()`` 会被调用，这样就造成了递归调用。\n    #这意味这会调用 ``self.__setattr__('name', value)`` ，每次方法会调用自己。这样会造成程序崩溃。\n\ndef __setattr__(self, name, value):\n    self.__dict__[name] = value  #给类中的属性名分配值\n    #定制特有属性\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("p",[t._v("Python的魔术方法非常强大，然而随之而来的则是责任。了解正确的方法去使用非常重要。")]),t._v(" "),e("p",[t._v("所以我们对于定制属性访问权限了解了多少呢。它不应该被轻易的使用。实际上，它非常强大。但是它存在的原因是:Python 不会试图将一些不好的东西变得不可能，而是让它们难以实现。自由是至高无上的，所以你可以做任何你想做的。以下是一个特别的属性控制的例子(我们使用 "),e("code",[t._v("super")]),t._v(" 因为不是所有的类都有 "),e("code",[t._v("__dict__")]),t._v(" 属性):")]),t._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AccessCounter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''一个包含计数器的控制权限的类每当值被改变时计数器会加一'''")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("super")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AccessCounter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__setattr__"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'counter'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("super")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AccessCounter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__setattr__"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("__setattr__")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("super")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AccessCounter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__setattr__"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'counter'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \t\t\t\t\t\t\t\t\t\t\t\t\t\tself"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("counter "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#如果你不想让其他属性被访问的话，那么可以抛出 AttributeError(name) 异常")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("super")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AccessCounter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__setattr__"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("__delattr__")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("super")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AccessCounter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__setattr__"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'counter'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    \t\t\t\t\t\t\t\t\t\tself"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("counter "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("super")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AccessCounter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__delattr__"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br")])]),e("h2",{attrs:{id:"创建定制的序列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建定制的序列"}},[t._v("#")]),t._v(" 创建定制的序列")]),t._v(" "),e("p",[t._v("有很多方法让你的Python类行为可以像内置的序列(dict, tuple,list, string等等)。这是目前为止我最喜欢的魔术方法,因为它给你很搞的控制权限而且让很多函数在你的类实例上工作的很出色。但是在开始之前，需要先讲一些必须条件。")]),t._v(" "),e("h3",{attrs:{id:"必须条件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#必须条件"}},[t._v("#")]),t._v(" 必须条件")]),t._v(" "),e("p",[t._v("现在我们开始讲如何在Python中创建定制的序列，这个时候该讲一讲协议。协议(Protocols)与其他语言中的接口很相似。它给你很多你必须定义的方法。然而在Python中的协议是很不正式的，不需要明确声明实现。事实上，他们更像一种指南。")]),t._v(" "),e("p",[t._v("我们为什么现在讨论协议？因为如果要定制容器类型的话需要用到这些协议。首先，实现不变容器的话有一个协议:实现不可变容器，你只能定义 "),e("code",[t._v("__len__")]),t._v(" 和 "),e("code",[t._v("__getitem__")]),t._v(" (一会会讲更多)。可变容器协议则需要所有不可变容器的所有另外还需要 "),e("code",[t._v("__setitem__")]),t._v(" 和 "),e("code",[t._v("__delitem__")]),t._v(" 。最终，如果你希望你的对象是可迭代的话，你需要定义 "),e("code",[t._v("__iter__")]),t._v(" 会返回一个迭代器。迭代器必须遵循迭代器协议，需要有 "),e("code",[t._v("__iter__")]),t._v(" (返回它本身) 和 "),e("code",[t._v("next")]),t._v(" 。")]),t._v(" "),e("h3",{attrs:{id:"容器后的魔法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器后的魔法"}},[t._v("#")]),t._v(" 容器后的魔法")]),t._v(" "),e("p",[t._v("这些是容器使用的魔术方法。 "),e("code",[t._v("__len__(self)")]),t._v(" 然会容器长度。对于可变不可变容器都需要有的协议的一部分。 "),e("code",[t._v("__getitem__(self, key)")]),t._v("定义当一个条目被访问时，使用符号 "),e("code",[t._v("self[key]")]),t._v(" 。这也是不可变容器和可变容器都要有的协议的一部分。如果键的类型错误和 "),e("code",[t._v("KeyError")]),t._v("或者没有合适的值。那么应该抛出适当的 "),e("code",[t._v("TypeError")]),t._v(" 异常。 "),e("code",[t._v("__setitem__(self, key, value)")]),t._v(" 定义当一个条目被赋值时的行为,使用 "),e("code",[t._v("self[key] = value")]),t._v(" 。这也是可变容器和不可变容器协议中都要有的一部分。 "),e("code",[t._v("__delitem__(self, key)")]),t._v(" 定义当一个条目被删除时的行为(比如 "),e("code",[t._v("del self[key]")]),t._v(")。这只是可变容器协议中的一部分。当使用一个无效的键时应该抛出适当的异常。 "),e("code",[t._v("__iter__(self)")]),t._v(" 返回一个容器的迭代器。很多情况下会返回迭代器，尤其是当内置的 "),e("code",[t._v("iter()")]),t._v(" 方法被调用的时候，或者当使用 "),e("code",[t._v("for x in container")]),t._v(" 方式循环的时候。迭代器是他们本身的对象，他们必须定义返回 "),e("code",[t._v("self")]),t._v(" 的 "),e("code",[t._v("__iter__")]),t._v(" 方法。 "),e("code",[t._v("__reversed__(self)")]),t._v(" 实现当 "),e("code",[t._v("reversed()")]),t._v(" 被调用时的行为。应该返回列表的反转版本。 "),e("code",[t._v("__contains__(self, item)")]),t._v(" 当调用 "),e("code",[t._v("in")]),t._v(" 和 "),e("code",[t._v("not in")]),t._v(" 来测试成员是否存在时候 "),e("code",[t._v("__contains__")]),t._v(" 被定义。你问为什么这个不是序列协议的一部分？那是因为当 "),e("code",[t._v("__contains__")]),t._v(" 没有被定义的时候，Python会迭代这个序列并且当找到需要的值时会返回 "),e("code",[t._v("True")]),t._v("。 "),e("code",[t._v("__concat__(self, other)")]),t._v(" 最终，你可以通过 "),e("code",[t._v("__concat__")]),t._v(" 来定义当用其他的来连接两个序列时候的行为。当 "),e("code",[t._v("+")]),t._v(" 操作符被调用时候会返回一个 "),e("code",[t._v("self")]),t._v(" 和 "),e("code",[t._v("other.__concat__")]),t._v(" 被调用后的结果产生的新序列。")]),t._v(" "),e("h3",{attrs:{id:"一个例子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一个例子"}},[t._v("#")]),t._v(" 一个例子")]),t._v(" "),e("p",[t._v("在我们的例子中，让我们看一看你可能在其他语言中 用到的函数构造语句的实现(比如 Haskell)。")]),t._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FunctionalList")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''一个封装了一些附加魔术方法比如 head, tail, init, last, drop, 和take的列表类。\n'''")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" values "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("values "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("values "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" values\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("__len__")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("values"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("__getitem__")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#如果键的类型或者值无效，列表值将会抛出错误")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("values"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("__setitem__")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("values"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("__delitem__")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("del")]),t._v(" self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("values"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("__iter__")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("iter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("values"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("__reversed__")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("reversed")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("values"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("values"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("head")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("values"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("tail")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("values"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#返回一直到末尾的所有元素")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("values"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("last")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#返回末尾元素")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("values"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("drop")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#返回除前n个外的所有元素")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("values"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("take")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#返回前n个元素")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("values"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br"),e("span",{staticClass:"line-number"},[t._v("31")]),e("br"),e("span",{staticClass:"line-number"},[t._v("32")]),e("br"),e("span",{staticClass:"line-number"},[t._v("33")]),e("br"),e("span",{staticClass:"line-number"},[t._v("34")]),e("br"),e("span",{staticClass:"line-number"},[t._v("35")]),e("br"),e("span",{staticClass:"line-number"},[t._v("36")]),e("br"),e("span",{staticClass:"line-number"},[t._v("37")]),e("br"),e("span",{staticClass:"line-number"},[t._v("38")]),e("br"),e("span",{staticClass:"line-number"},[t._v("39")]),e("br"),e("span",{staticClass:"line-number"},[t._v("40")]),e("br"),e("span",{staticClass:"line-number"},[t._v("41")]),e("br"),e("span",{staticClass:"line-number"},[t._v("42")]),e("br"),e("span",{staticClass:"line-number"},[t._v("43")]),e("br"),e("span",{staticClass:"line-number"},[t._v("44")]),e("br"),e("span",{staticClass:"line-number"},[t._v("45")]),e("br"),e("span",{staticClass:"line-number"},[t._v("46")]),e("br"),e("span",{staticClass:"line-number"},[t._v("47")]),e("br")])]),e("h2",{attrs:{id:"反射"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#反射"}},[t._v("#")]),t._v(" 反射")]),t._v(" "),e("p",[t._v("你可以通过魔术方法控制控制使用 "),e("code",[t._v("isinstance()")]),t._v(" 和 "),e("code",[t._v("issubclass()")]),t._v(" 内置方法的反射行为。这些魔术方法是:")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("__instancecheck__(self, instance)\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("检查一个实例是不是你定义的类的实例")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("__subclasscheck__(self, subclass)\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("检查一个类是不是你定义的类的子类")]),t._v(" "),e("p",[t._v("这些方法的用例似乎很少，这也许是真的。我不会花更多的时间在这些魔术方法上因为他们并不是很重要，但是他们的确反应了Python 中的面向对象编程的一些基本特性:非常容易的去做一些事情，即使并不是很必须。这些魔术方法看起来并不是很有用，但是当你需要的时候你会很高兴有这种特性。")]),t._v(" "),e("h2",{attrs:{id:"可以调用的对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可以调用的对象"}},[t._v("#")]),t._v(" 可以调用的对象")]),t._v(" "),e("p",[t._v("你也许已经知道，在Python中，方法也是一种高等的对象。这意味着他们也可以被传递到方法中就像其他对象一样。这是一个非常惊人的特性。 在Python中，一个特殊的魔术方法可以让类的实例的行为表现的像函数一样，你可以调用他们**，将一个函数当做一个参数传到另外一个函数中**等等。这是一个非常强大的特性让Python编程更加舒适甜美。 "),e("code",[t._v("__call__(self, [args...])")])]),t._v(" "),e("p",[t._v("允许一个类的实例像函数一样被调用。实质上说，"),e("strong",[t._v("这意味着 "),e("code",[t._v("x()")]),t._v(" 与 "),e("code",[t._v("x.__call__()")]),t._v(" 是相同的")]),t._v("。注意 "),e("code",[t._v("__call__")]),t._v(" 参数可变。这意味着你可以定义 "),e("code",[t._v("__call__")]),t._v(" 为其他你想要的函数，无论有多少个参数。")]),t._v(" "),e("p",[e("code",[t._v("__call__")]),t._v(" 在那些类的实例经常改变状态的时候会非常有效。调用这个实例是一种改变这个对象状态的直接和优雅的做法。用一个实例来表达最好不过了:")]),t._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entity")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''调用实体来改变实体的位置。'''")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y\n        self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" size\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("__call__")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''改变实体的位置'''")]),t._v("\n        self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br")])]),e("h2",{attrs:{id:"会话管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#会话管理"}},[t._v("#")]),t._v(" 会话管理")]),t._v(" "),e("p",[t._v("在Python 2.5中，为了代码利用定义了一个新的关键词 "),e("code",[t._v("with")]),t._v(" 语句。会话控制在Python中不罕见(之前是作为库的一部分被实现)，直到 "),e("a",{attrs:{href:"http://www.python.org/dev/peps/pep-0343/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PEP343"),e("OutboundLink")],1),t._v(" 被添加后。它被成为一级语言结构。你也许之前看到这样的语句:")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("with open('foo.txt') as bar:\n# perform some action with bar\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("回话控制器通过包装一个 "),e("code",[t._v("with")]),t._v(" 语句来设置和清理行为。回话控制器的行为通过两个魔术方法来定义: "),e("code",[t._v("__enter__(self)")]),t._v(" 定义当使用 "),e("code",[t._v("with")]),t._v("语句的时候会话管理器应该初始块被创建的时候的行为。注意 "),e("code",[t._v("__enter__")]),t._v(" 的返回值被 "),e("code",[t._v("with")]),t._v(" 语句的目标或者 "),e("code",[t._v("as")]),t._v(" 后的名字绑定。"),e("code",[t._v("__exit__(self, exception_type, exception_value, traceback)")]),t._v(" 定义当一个代码块被执行或者终止后会话管理器应该做什么。它可以被用来处理异常，清除工作或者做一些代码块执行完毕之后的日常工作。如果代码块执行成功， "),e("code",[t._v("exception_type")]),t._v(" , "),e("code",[t._v("exception_value")]),t._v(" , 和 "),e("code",[t._v("traceback")]),t._v(" 将会是 "),e("code",[t._v("None")]),t._v(" 。否则的话你可以选择处理这个异常或者是直接交给用户处理。如果你想处理这个异常的话，确认 "),e("code",[t._v("__exit__")]),t._v("在所有结束之后会返回 "),e("code",[t._v("True")]),t._v(" 。如果你想让异常被会话管理器处理的话，那么就这样处理。")]),t._v(" "),e("p",[e("code",[t._v("__enter")]),t._v(" 和 "),e("code",[t._v("__exit__")]),t._v(" 对于明确有定义好的和日常行为的设置和清洁工作的类很有帮助。你也可以使用这些方法来创建一般的可以包装其他对象的会话管理器。以下是一个例子。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Closer:\n'''通过with语句和一个close方法来关闭一个对象的会话管理器'''\n\ndef __init__(self, obj):\n    self.obj = obj\n\ndef __enter__(self):\n    return self.obj # bound to target\n\ndef __exit__(self, exception_type, exception_val, trace):\n    try:\n        self.obj.close()\n    except AttributeError: # obj isn't closable\n        print 'Not closable.'\n        return True # exception handled successfully\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br")])]),e("p",[t._v("以下是一个使用 "),e("code",[t._v("Closer")]),t._v(" 的例子，使用一个FTP链接来证明(一个可关闭的套接字):")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(">>> from magicmethods import Closer\n>>> from ftplib import FTP\n>>> with Closer(FTP('ftp.somesite.com')) as conn:\n...     conn.dir()\n...\n>>> conn.dir()\n>>> with Closer(int(5)) as i:\n...     i += 1\n...\nNot closable.\n>>> i\n6\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br")])]),e("p",[t._v("你已经看到了我们的包装器如何静默的处理适当和不适当的使用行为。这是会话管理器和魔术方法的强大功能。")]),t._v(" "),e("h2",{attrs:{id:"创建对象的描述器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建对象的描述器"}},[t._v("#")]),t._v(" 创建对象的描述器")]),t._v(" "),e("p",[t._v("描述器是通过得到，设置，删除的时候被访问的类。当然也可以修改其他的对象。描述器并不是鼓励的，他们注定被一个所有者类所持有。当创建面向对象的数据库或者类，里面含有相互依赖的属性时，描述器将会非常有用。一种典型的使用方法是用不同的单位表示同一个数值，或者表示某个数据的附加属性(比如坐标系上某个点包含了这个点到远点的距离信息)。")]),t._v(" "),e("p",[t._v("为了构建一个描述器，一个类必须有至少 "),e("code",[t._v("__get__")]),t._v(" 或者 "),e("code",[t._v("__set__")]),t._v(" 其中一个，并且 "),e("code",[t._v("__delete__")]),t._v(" 被实现。让我们看看这些魔术方法。"),e("code",[t._v("__get__(self, instance, owner)")]),t._v(" 定义当描述器的值被取得的时候的行为， "),e("code",[t._v("instance")]),t._v(" 是拥有者对象的一个实例。 "),e("code",[t._v("owner")]),t._v(" 是拥有者类本身。 "),e("code",[t._v("__set__(self, instance, value)")]),t._v(" 定义当描述器值被改变时候的行为。 "),e("code",[t._v("instance")]),t._v(" 是拥有者类的一个实例 "),e("code",[t._v("value")]),t._v(" 是要设置的值。"),e("code",[t._v("__delete__(self, instance)")]),t._v(" 定义当描述器的值被删除的行为。"),e("code",[t._v("instance")]),t._v(" 是拥有者对象的实例。 以下是一个描述器的实例:单位转换。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Meter(object):\n'''Descriptor for a meter.'''\n\n    def __init__(self, value=0.0):\n    self.value = float(value)\n    def __get__(self, instance, owner):\n    return self.value\n    def __set__(self, instance, value):\n    self.value = float(value)\n\nclass Foot(object):\n    '''Descriptor for a foot.'''\n\n    def __get__(self, instance, owner):\n    return instance.meter * 3.2808\n    def __set__(self, instance, value):\n    instance.meter = float(value) / 3.2808\n\nclass Distance(object):\n    '''Class to represent distance holding two descriptors for feet and\n    meters.'''\n    meter = Meter()\n    foot = Foot()\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br")])]),e("h2",{attrs:{id:"储存你的对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#储存你的对象"}},[t._v("#")]),t._v(" 储存你的对象")]),t._v(" "),e("p",[t._v("如果你接触过其他的 Pythoner，你可能已经听说过 Pickle 了， Pickle 是用来序列化 Python 数据结构的模块，在你需要暂时存储一个对象的时候（比如缓存），这个模块非常的有用，不过这同时也是隐患的诞生地。")]),t._v(" "),e("p",[t._v("序列化数据是一个非常重要的功能，所以他不仅仅拥有相关的模块（ "),e("code",[t._v("Pickle")]),t._v(" , "),e("code",[t._v("cPickle")]),t._v(" ），还有自己的协议以及魔术方法，不过首先，我们先讨论下关于序列化内建数据结构的方法。")]),t._v(" "),e("h3",{attrs:{id:"pickling-简单例子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pickling-简单例子"}},[t._v("#")]),t._v(" Pickling: 简单例子")]),t._v(" "),e("p",[t._v("让我们深入研究 Pickle，比如说你现在需要临时储存一个字典，你可以把它写入到一个文件里，并且要小心翼翼的确保格式正确，之后再用 exec() 或者处理文件输入来恢复数据，实际上这是很不安全的，如果你使用文本存储了一些重要的数据，任何方式的改变都可能会影响到你的程序，轻则程序崩溃，重则被恶意程序利用，所以，让我们用 Pickle 代替这种方式：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import pickle\n\ndata = {'foo': [1, 2, 3],\n        'bar': ('Hello', 'world!'),\n        'baz': True}\njar = open('data.pkl', 'wb')\npickle.dump(data, jar) # write the pickled data to the file jar\njar.close()\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("p",[t._v("嗯，过了几个小时之后，我们需要用到它了，只需把它 unpickle 了就行了：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import pickle\n\npkl_file = open('data.pkl', 'rb') # connect to the pickled data\ndata = pickle.load(pkl_file) # load it into a variable\nprint data\npkl_file.close()\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("p",[t._v("正如你期望的，数据原封不动的回来了！")]),t._v(" "),e("p",[t._v("同时要给你一句忠告： pickle 并不是很完美， Pickle 文件很容易被不小心或者故意损坏， Pickle 文件比纯文本文件要稍微安全一点，但是还是可以被利用运行恶意程序。 Pickle 不是跨版本兼容的（译注：最近刚好在 《Python Cookbook》上看到相关讨论，书中描述的 Pickle 是跨版本兼容的，此点待验证），所以尽量不要去分发 Pickle 过的文本，因为别人并不一定能够打开。不过在做缓存或者其他需要序列化数据的时候， Pickle 还是很有用处的。")]),t._v(" "),e("h3",{attrs:{id:"序列化你自己的对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#序列化你自己的对象"}},[t._v("#")]),t._v(" 序列化你自己的对象")]),t._v(" "),e("p",[t._v("Pickle 并不是只支持内建数据结果，任何遵循 Pickle 协议的类都可以，Pickle 协议为 Python 对象规定了4个可选方法来自定义 Pickle 行为（对于 C 扩展的 cPickle 模块会有一些不同，但是这并不在我们的讨论范围内）：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("__getinitargs__(self)\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("如果你希望在逆序列化的同时调用 "),e("code",[t._v("__init__")]),t._v(" ，你可以定义 "),e("code",[t._v("__getinitargs__")]),t._v(" 方法，这个方法应该返回一系列你想被 "),e("code",[t._v("__init__")]),t._v(" 调用的参数，注意这个方法只对老样式的类起作用。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("__getnewargs__(self)\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("对于新式的类，你可以定义任何在重建对象时候传递到 "),e("code",[t._v("__new__")]),t._v(" 方法中的参数。这个方法也应该返回一系列的被 "),e("code",[t._v("__new__")]),t._v(" 调用的参数。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("__getstate__(self)\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("你可以自定义当对象被序列化时返回的状态，而不是使用 "),e("code",[t._v("__dict")]),t._v(" 方法，当逆序列化对象的时候，返回的状态将会被 "),e("code",[t._v("__setstate__")]),t._v(" 方法调用。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("__setstate__(self, state)\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("在对象逆序列化的时候，如果 "),e("code",[t._v("__setstate__")]),t._v(" 定义过的话，对象的状态将被传给它而不是传给 "),e("code",[t._v("__dict__")]),t._v(" 。这个方法是和 "),e("code",[t._v("__getstate__")]),t._v("配对的，当这两个方法都被定义的时候，你就可以完全控制整个序列化与逆序列化的过程了。")]),t._v(" "),e("h3",{attrs:{id:"例子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[t._v("#")]),t._v(" 例子")]),t._v(" "),e("p",[t._v("我们以 Slate 为例，这是一段记录一个值以及这个值是何时被写入的程序，但是，这个 Slate 有一点特殊的地方，当前值不会被保存。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import time\n\nclass Slate:\n    '''Class to store a string and a changelog, and forget its value when\n    pickled.'''\n\n    def __init__(self, value):\n        self.value = value\n        self.last_change = time.asctime()\n        self.history = {}\n\n    def change(self, new_value):\n        # Change the value. Commit last value to history\n        self.history[self.last_change] = self.value\n        self.value = new_value\n        self.last_change = time.asctime()\n\n    def print_changes(self):\n        print 'Changelog for Slate object:'\n        for k, v in self.history.items():\n            print '%s\\t %s' % (k, v)\n\n    def __getstate__(self):\n        # Deliberately do not return self.value or self.last_change.\n        # We want to have a \"blank slate\" when we unpickle.\n        return self.history\n\n    def __setstate__(self, state):\n        # Make self.history = state and last_change and value undefined\n        self.history = state\n        self.value, self.last_change = None, None\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br"),e("span",{staticClass:"line-number"},[t._v("31")]),e("br")])]),e("h3",{attrs:{id:"结论"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[t._v("#")]),t._v(" 结论")]),t._v(" "),e("p",[t._v("这份指南的希望为所有人都能带来一些知识，即使你是 Python 大牛或者对于精通于面向对象开发。如果你是一个 Python 初学者，阅读这篇文章之后你已经获得了编写丰富，优雅，灵活的类的知识基础了。如果你是一个有一些经验的 Python 程序员，你可能会发现一些能让你写的代码更简洁的方法。如果你是一个 Python 大牛，可能会帮助你想起来一些你已经遗忘的知识，或者一些你还没听说过的新功能。不管你现在有多少经验，我希望这次对于 Python 特殊方法的旅程能够带给你一些帮助（用双关语真的很不错 XD）（译注: 这里的双关在于标题为 Magic Methods 这里是 神奇的旅程 ，不过由于中英语序的问题，直译略显头重脚轻，所以稍微变化了下意思，丢掉了双关的含义）。")]),t._v(" "),e("h3",{attrs:{id:"附录：如何调用魔术方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#附录：如何调用魔术方法"}},[t._v("#")]),t._v(" 附录：如何调用魔术方法")]),t._v(" "),e("p",[t._v("一些魔术方法直接和内建函数相对，在这种情况下，调用他们的方法很简单，但是，如果是另外一种不是特别明显的调用方法，这个附录介绍了很多并不是很明显的魔术方法的调用形式。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("魔术方法")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("调用方式")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("解释")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("new")]),t._v("(cls [,...])")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("instance = MyClass(arg1, arg2)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("new")]),t._v(" 在创建实例的时候被调用")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("init")]),t._v("(self [,...])")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("instance = MyClass(arg1, arg2)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("init")]),t._v(" 在创建实例的时候被调用")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("cmp")]),t._v("(self, other)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("self == other, self > other, 等。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("在比较的时候调用")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("pos")]),t._v("(self)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("+self")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("一元加运算符")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("neg")]),t._v("(self)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-self")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("一元减运算符")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("invert")]),t._v("(self)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("~self")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("取反运算符")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("index")]),t._v("(self)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("x[self]")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("对象被作为索引使用的时候")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("nonzero")]),t._v("(self)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("bool(self)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("对象的布尔值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("getattr")]),t._v("(self, name)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("self.name # name 不存在")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("访问一个不存在的属性时")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("setattr")]),t._v("(self, name, val)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("self.name = val")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("对一个属性赋值时")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("delattr")]),t._v("(self, name)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("del self.name")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("删除一个属性时")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("__getattribute(self, name)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("self.name")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("访问任何属性时")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("getitem")]),t._v("(self, key)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("self[key]")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("使用索引访问元素时")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("setitem")]),t._v("(self, key, val)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("self[key] = val")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("对某个索引值赋值时")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("delitem")]),t._v("(self, key)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("del self[key]")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("删除某个索引值时")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("iter")]),t._v("(self)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("for x in self")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("迭代时")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("contains")]),t._v("(self, value)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("value in self, value not in self")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("使用 in 操作测试关系时")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("concat")]),t._v("(self, value)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("self + other")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("连接两个对象时")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("call")]),t._v("(self [,...])")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("self(args)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("“调用”对象时")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("enter")]),t._v("(self)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("with self as x:")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("with 语句环境管理")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("exit")]),t._v("(self, exc, val, trace)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("with self as x:")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("with 语句环境管理")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("getstate")]),t._v("(self)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("pickle.dump(pkl_file, self)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("序列化")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("setstate")]),t._v("(self)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("data = pickle.load(pkl_file)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("序列化")])])])])])}),[],!1,null,null,null);s.default=_.exports}}]);